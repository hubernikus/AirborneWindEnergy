Python 3.5.2 (default, Sep 14 2017, 22:51:06) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: 
In [2]: 
In [3]: 
In [4]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()
[0, -0.07512464618398068, 0]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]
quat0: [0.999294618884655, 0.0, -0.037553490758810176, 0.0]  q_IB [0.999294618884655, 0.0, -0.037553490758810176, 0.0]
dirBody [ 0.99717947  0.          0.075054  ]

In [5]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()
[0, -0.07512464618398068, 0]

In [6]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()
[0, -0.07512464618398068, 0]

In [7]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()

In [8]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()

In [9]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()

In [10]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()

In [11]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()

In [12]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()

In [13]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()

In [14]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: print('Sideslip:', initValues_circ['beta'])
    ...: print('Velocities:')
    ...: print(initValues_circ['vel'])
    ...: 
    ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
    ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.033038214541150586
[0.08638287550067691]

Stable Circle flight with:
Thrust: 5.078488676865708
Elevator: -0.02768266499321424
Rudder: -0.0017499712350133808
Circle Radius: 14.457745049577863
Angle of attack: [0.08638287550067691]
Sideslip: [0.020216218792361372]
Velocities:
[4.9803387001205435, 0.10107420887109268, 0.4312892722787114]
End script

In [15]: """
    ...: Created on Wed Oct 11 23:20:36 2017
    ...: 
    ...: @author: lukas
    ...: """
    ...: # import libraries
    ...: from math import asin, atan2, sin, cos, pi, copysign
    ...: 
    ...: import numpy as np
    ...: from numpy import linalg as LA
    ...: ...
    ...:     cp = cos(pitch * 0.5)
    ...:     sp = sin(pitch * 0.5)
    ...: 
    ...:     # Calulate quaternion
    ...:     q = [cy * cr * cp + sy * sr * sp,
    ...:          cy * cr * sp - sy * sr * cp,
    ...:          cy * sr * cp + sy * cr * sp,
    ...:          sy * cr * cp - cy * sr * sp]
    ...:     
    ...:     return q

In [16]: """
    ...: Created on Wed Oct 11 23:20:36 2017
    ...: 
    ...: @author: lukas
    ...: """
    ...: # import libraries
    ...: from math import asin, atan2, sin, cos, pi, copysign
    ...: 
    ...: import numpy as np
    ...: from numpy import linalg as LA
    ...: ...
    ...:     cp = cos(pitch * 0.5)
    ...:     sp = sin(pitch * 0.5)
    ...: 
    ...:     # Calulate quaternion
    ...:     q = [cy * cr * cp + sy * sr * sp,
    ...:          cy * cr * sp - sy * sr * cp,
    ...:          cy * sr * cp + sy * cr * sp,
    ...:          sy * cr * cp - cy * sr * sp]
    ...:     
    ...:     return q

In [17]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()

In [18]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()

In [19]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
[0, -0.07512464618398068, 0]

In [20]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
[0, -0.07512464618398068, 0]
Exception in Tkinter callback
Traceback (most recent call last):
  File "/usr/lib/python3.5/tkinter/__init__.py", line 1553, in __call__
    return self.func(*args)
  File "/usr/lib/python3.5/tkinter/__init__.py", line 599, in callit
    func(*args)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/backends/backend_tkagg.py", line 95, in _on_timer
    TimerBase._on_timer(self)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/backend_bases.py", line 1382, in _on_timer
    ret = func(*args, **kwargs)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1542, in _step
    still_going = Animation._step(self, *args)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1277, in _step
    self._draw_next_frame(framedata, self._blit)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1296, in _draw_next_frame
    self._draw_frame(framedata)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1814, in _draw_frame
    self._drawn_artists = self._func(framedata, *self._args)
  File "/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py", line 245, in update3d_aircraft
    planeBody, wingSurf, tailSurf = drawPlane(it, quat)
NameError: name 'it' is not defined

In [21]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
[0, -0.07512464618398068, 0]

In [22]: invalid command name "140178328858120idle_draw"
    while executing
"140178328858120idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
[0, -0.07512464618398068, 0]

In [23]: invalid command name "140178402506184idle_draw"
    while executing
"140178402506184idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()

In [24]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()

In [25]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()

In [26]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()

In [27]: invalid command name "140178354961928idle_draw"
    while executing
"140178354961928idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()

  C-c C-c---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
<ipython-input-27-e052e4010078> in <module>()
----> 1 import codecs, os, ast;__pyfile = codecs.open('''/tmp/py12369X2I''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/py12369X2I''');__block = ast.parse(__code, '''/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py''', mode='exec');__last = __block.body[-1];__isexpr = isinstance(__last,ast.Expr);__block.body.pop() if __isexpr else None;exec(compile(__block, '''/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py''', mode='exec'));eval(compile(ast.Expression(__last.value), '''/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py''', mode='eval')) if __isexpr else None

/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py in <module>()
    380 #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    381                     #init_func=init, blit=True)
--> 382 plt.show()
    383 
    384 

/usr/local/lib/python3.5/dist-packages/matplotlib/pyplot.py in show(*args, **kw)
    249     """
    250     global _show
--> 251     return _show(*args, **kw)
    252 
    253 

/usr/local/lib/python3.5/dist-packages/matplotlib/backend_bases.py in show(cls, block)
    215                 block = True
    216         if block:
--> 217             cls.mainloop()
    218 
    219     # This method is the one actually exporting the required methods.

/usr/local/lib/python3.5/dist-packages/matplotlib/backends/backend_tkagg.py in mainloop()
   1076     @staticmethod
   1077     def mainloop():
-> 1078         Tk.mainloop()

/usr/lib/python3.5/tkinter/__init__.py in mainloop(n)
    406 def mainloop(n=0):
    407     """Run the main loop of Tcl."""
--> 408     _default_root.tk.mainloop(n)
    409 
    410 getint = int

/usr/lib/python3.5/tkinter/__init__.py in __call__(self, *args)
   1546         self.subst = subst
   1547         self.widget = widget
-> 1548     def __call__(self, *args):
   1549         """Apply first function SUBST to arguments, than FUNC."""
   1550         try:

KeyboardInterrupt: 

In [28]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()

In [29]: invalid command name "140178329114184idle_draw"
    while executing
"140178329114184idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()

In [30]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()

In [31]: invalid command name "140178354660744idle_draw"
    while executing
"140178354660744idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
  File "/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py", line 195
    def update3d_aircraft(frame):
      ^
IndentationError: expected an indented block


In [32]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [33]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [34]: invalid command name "140178329105096idle_draw"
    while executing
"140178329105096idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
init useless...

In [35]: invalid command name "140178348867976idle_draw"
    while executing
"140178348867976idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
init useless...

In [36]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
  File "/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py", line 346
    x[it][i]+(tailWidth/2+tailPos)*dBody[i]+dirTail[i]*tailPosz])
                                                                ^
SyntaxError: invalid syntax


In [37]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [38]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...
Exception in Tkinter callback
Traceback (most recent call last):
  File "/usr/lib/python3.5/tkinter/__init__.py", line 1553, in __call__
    return self.func(*args)
  File "/usr/lib/python3.5/tkinter/__init__.py", line 599, in callit
    func(*args)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/backends/backend_tkagg.py", line 95, in _on_timer
    TimerBase._on_timer(self)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/backend_bases.py", line 1382, in _on_timer
    ret = func(*args, **kwargs)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1542, in _step
    still_going = Animation._step(self, *args)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1277, in _step
    self._draw_next_frame(framedata, self._blit)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1296, in _draw_next_frame
    self._draw_frame(framedata)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1814, in _draw_frame
    self._drawn_artists = self._func(framedata, *self._args)
  File "/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py", line 209, in update3d_aircraft
    planeBody, wingSurf, tailSurf = drawPlane(iter, quat[-1])
  File "/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py", line 359, in drawPlane
    planeTailHold, = ax_3d.plot(X_tailHold, Y_tailHold, Z_tailHold, 'k', linewidth = lWidth)
  File "/usr/local/lib/python3.5/dist-packages/mpl_toolkits/mplot3d/axes3d.py", line 1551, in plot
    zs = _backports.broadcast_to(zs, len(xs))
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/cbook/_backports.py", line 147, in broadcast_to
    return _broadcast_to(array, shape, subok=subok, readonly=True)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/cbook/_backports.py", line 101, in _broadcast_to
    op_flags=[op_flag], itershape=shape, order='C').itviews[0]
ValueError: input operand has more dimensions than allowed by the axis remapping

In [39]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [40]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [41]: """
    ...: Created on Wed Oct 11 23:20:36 2017
    ...: 
    ...: @author: lukas
    ...: """
    ...: # import libraries
    ...: from math import asin, atan2, sin, cos, pi, copysign
    ...: 
    ...: import numpy as np
    ...: from numpy import linalg as LA
    ...: ...
    ...:     cp = cos(pitch * 0.5)
    ...:     sp = sin(pitch * 0.5)
    ...: 
    ...:     # Calulate quaternion
    ...:     q = [cy * cr * cp + sy * sr * sp,
    ...:          cy * cr * sp - sy * sr * cp,
    ...:          cy * sr * cp + sy * cr * sp,
    ...:          sy * cr * cp - cy * sr * sp]
    ...:     
    ...:     return q

In [42]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [43]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
x: [0, 0, 0]   vel: [4.9803387001205435, 0.10107420887109268, 0.4312892722787114]
x: [0.055581, 0.000364995, 0.00437344]   vel: [6.13564, 0.0645306, 0.422796]
x: [0.122697, 0.00107525, 0.00847694]   vel: [7.28756, 0.0179691, 0.391267]
x: [0.201308, 0.00228749, 0.0120854]   vel: [8.43496, -0.0375124, 0.343719]
x: [0.291364, 0.00415038, 0.0150146]   vel: [9.57698, -0.100436, 0.288166]
x: [0.392805, 0.0068056, 0.0171077]   vel: [10.7131, -0.16889, 0.231994]
x: [0.505565, 0.0103906, 0.0182127]   vel: [11.8428, -0.240477, 0.18075]
x: [0.629569, 0.0150413, 0.0181579]   vel: [12.9661, -0.312295, 0.137584]
x: [0.764735, 0.0208943, 0.0167313]   vel: [14.0827, -0.38097, 0.10336]
x: [0.910968, 0.0280871, 0.0136674]   vel: [15.1924, -0.442756, 0.0772597]
x: [1.06816, 0.0367569, 0.00864356]   vel: [16.2948, -0.493702, 0.0575631]
x: [1.23619, 0.0470381, 0.00128256]   vel: [17.3898, -0.529904, 0.0423485]
x: [1.41493, 0.0590593, -0.00884109]   vel: [18.4771, -0.547825, 0.0299607]
x: [1.6042, 0.0729399, -0.0221934]   vel: [19.5561, -0.544657, 0.0192124]
x: [1.80383, 0.0887874, -0.0392738]   vel: [20.6266, -0.518724, 0.0093842]
x: [2.01363, 0.106696, -0.0606103]   vel: [21.6877, -0.469842, 0.000115236]
x: [2.23335, 0.126747, -0.0867555]   vel: [22.739, -0.399618, -0.00873053]
x: [2.46276, 0.149007, -0.118284]   vel: [23.7797, -0.311605, -0.0171784]
x: [2.70155, 0.173534, -0.155788]   vel: [24.8092, -0.21127, -0.0252196]
x: [2.94943, 0.200375, -0.199878]   vel: [25.8269, -0.105714, -0.0328538]
x: [3.20603, 0.229574, -0.251177]   vel: [26.8323, -0.00314839, -0.0401061]
x: [3.47097, 0.261175, -0.310315]   vel: [27.8254, 0.0878733, -0.0470274]
x: [3.74382, 0.295224, -0.37793]   vel: [28.8058, 0.159385, -0.0536834]
x: [4.02413, 0.331778, -0.454658]   vel: [29.7734, 0.205015, -0.0601395]
x: [4.31137, 0.370903, -0.541132]   vel: [30.7282, 0.220907, -0.0664456]
x: [4.60501, 0.412677, -0.637976]   vel: [31.67, 0.206417, -0.0726274]
x: [4.90443, 0.457192, -0.745802]   vel: [32.5984, 0.164424, -0.0786872]
x: [5.20902, 0.50455, -0.865207]   vel: [33.5132, 0.101165, -0.0846136]
x: [5.51807, 0.554858, -0.996768]   vel: [34.414, 0.0255337, -0.0903957]
x: [5.83087, 0.608226, -1.14104]   vel: [35.3005, -0.0520808, -0.0960348]
x: [6.14662, 0.664756, -1.29856]   vel: [36.1727, -0.12129, -0.101548]
x: [6.46453, 0.724538, -1.46983]   vel: [37.0305, -0.173285, -0.106962]
x: [6.78371, 0.787644, -1.65532]   vel: [37.8739, -0.202231, -0.112305]
x: [7.10327, 0.854122, -1.85547]   vel: [38.703, -0.206199, -0.117592]
x: [7.42227, 0.923995, -2.07069]   vel: [39.5177, -0.187434, -0.122824]
x: [7.73973, 0.99726, -2.30133]   vel: [40.3178, -0.151855, -0.127994]
x: [8.05462, 1.07389, -2.54771]   vel: [41.1033, -0.10788, -0.133092]
x: [8.36589, 1.15385, -2.81009]   vel: [41.8743, -0.064754, -0.138114]
x: [8.67246, 1.23706, -3.08867]   vel: [42.6306, -0.0307478, -0.143064]
x: [8.97322, 1.32347, -3.3836]   vel: [43.3724, -0.0115859, -0.147951]
x: [9.26701, 1.41299, -3.69496]   vel: [44.0998, -0.00945212, -0.152782]
x: [9.55269, 1.50554, -4.02275]   vel: [44.8128, -0.0227926, -0.157561]
x: [9.82906, 1.60102, -4.36691]   vel: [45.5117, -0.046945, -0.162289]
x: [10.0949, 1.69933, -4.72732]   vel: [46.1964, -0.0754312, -0.166967]
x: [10.3491, 1.80036, -5.10375]   vel: [46.8673, -0.101586, -0.171598]
x: [10.5903, 1.90396, -5.49591]   vel: [47.5244, -0.120118, -0.176187]
x: [10.8175, 2.00999, -5.90344]   vel: [48.168, -0.128222, -0.180737]
x: [11.0293, 2.11827, -6.32589]   vel: [48.7982, -0.125986, -0.185248]
x: [11.2245, 2.22859, -6.76272]   vel: [49.4154, -0.116032, -0.189719]
x: [11.4021, 2.34074, -7.21333]   vel: [50.0197, -0.102547, -0.194147]
x: [11.5609, 2.45446, -7.67702]   vel: [50.6114, -0.0899986, -0.198529]
x: [11.6996, 2.56952, -8.15301]   vel: [51.1908, -0.081911, -0.202864]
x: [11.8174, 2.68563, -8.64043]   vel: [51.758, -0.0800456, -0.207151]
x: [11.913, 2.80251, -9.13836]   vel: [52.3135, -0.0841584, -0.21139]
x: [11.9856, 2.91988, -9.64575]   vel: [52.8574, -0.0923597, -0.21558]
x: [12.0341, 3.03744, -10.1615]   vel: [53.3902, -0.101899, -0.21972]
x: [12.0578, 3.15486, -10.6844]   vel: [53.9122, -0.110102, -0.22381]
x: [12.0557, 3.27183, -11.2133]   vel: [54.4236, -0.115149, -0.227848]
x: [12.0271, 3.388, -11.7467]   vel: [54.9249, -0.116486, -0.231833]
x: [11.9714, 3.50303, -12.2834]   vel: [55.4164, -0.114794, -0.235762]
x: [11.888, 3.61657, -12.8218]   vel: [55.8983, -0.111563, -0.239631]
x: [11.7763, 3.72823, -13.3604]   vel: [56.3711, -0.108488, -0.243438]
x: [11.636, 3.83766, -13.8977]   vel: [56.8351, -0.106885, -0.247179]
x: [11.4667, 3.94448, -14.432]   vel: [57.2906, -0.107333, -0.250851]
x: [11.2683, 4.04831, -14.9617]   vel: [57.738, -0.109613, -0.254451]
x: [11.0406, 4.14878, -15.4851]   vel: [58.1777, -0.112926, -0.257976]
x: [10.7837, 4.24551, -16.0004]   vel: [58.6099, -0.116275, -0.261425]
x: [10.4976, 4.33814, -16.5059]   vel: [59.0351, -0.118849, -0.264792]
x: [10.1826, 4.4263, -16.9998]   vel: [59.4536, -0.120263, -0.268077]
x: [9.83902, 4.50962, -17.4803]   vel: [59.8656, -0.120619, -0.271274]
x: [9.46736, 4.58775, -17.9456]   vel: [60.2716, -0.120371, -0.274381]
x: [9.06821, 4.66034, -18.3939]   vel: [60.6718, -0.120093, -0.277394]
x: [8.64227, 4.72707, -18.8235]   vel: [61.0665, -0.120244, -0.28031]
x: [8.19039, 4.78759, -19.2326]   vel: [61.456, -0.12102, -0.283124]
x: [7.71352, 4.84162, -19.6194]   vel: [61.8407, -0.122339, -0.285835]
x: [7.21277, 4.88886, -19.9823]   vel: [62.2207, -0.123922, -0.28844]
x: [6.68934, 4.92903, -20.3197]   vel: [62.5963, -0.125451, -0.290934]
x: [6.14455, 4.96189, -20.6298]   vel: [62.9678, -0.126692, -0.293317]
x: [5.57985, 4.9872, -20.9112]   vel: [63.3354, -0.127573, -0.295585]
x: [4.99683, 5.00475, -21.1625]   vel: [63.6993, -0.128179, -0.297735]
x: [4.39715, 5.01436, -21.3821]   vel: [64.0596, -0.128682, -0.299766]
x: [3.78261, 5.01588, -21.5689]   vel: [64.4166, -0.129252, -0.301675]
x: [3.1551, 5.00917, -21.7215]   vel: [64.7705, -0.129992, -0.303462]
x: [2.51662, 4.99414, -21.839]   vel: [65.1212, -0.130908, -0.305123]
x: [1.86926, 4.97071, -21.9202]   vel: [65.469, -0.131927, -0.306659]
x: [1.21521, 4.93885, -21.9644]   vel: [65.814, -0.132949, -0.308067]
x: [0.55672, 4.89855, -21.9708]   vel: [66.1562, -0.133892, -0.309349]
x: [-0.103869, 4.84984, -21.9387]   vel: [66.4957, -0.134725, -0.310503]
x: [-0.764156, 4.79279, -21.8677]   vel: [66.8325, -0.135468, -0.31153]
x: [-1.42168, 4.72749, -21.7574]   vel: [67.1666, -0.136174, -0.31243]
x: [-2.07392, 4.65408, -21.6077]   vel: [67.4981, -0.136896, -0.313204]
x: [-2.71833, 4.57274, -21.4185]   vel: [67.8269, -0.137664, -0.313854]
x: [-3.35234, 4.48367, -21.1901]   vel: [68.1528, -0.138477, -0.31438]
x: [-3.97337, 4.38712, -20.9226]   vel: [68.476, -0.139311, -0.314784]
x: [-4.57881, 4.28339, -20.6167]   vel: [68.7963, -0.140135, -0.31507]
x: [-5.16606, 4.17278, -20.2729]   vel: [69.1136, -0.140927, -0.31524]
x: [-5.73257, 4.05567, -19.8921]   vel: [69.4277, -0.14168, -0.315296]
x: [-6.27578, 3.93244, -19.4753]   vel: [69.7385, -0.142405, -0.315243]
x: [-6.79322, 3.80353, -19.0237]   vel: [70.0459, -0.143117, -0.315084]
x: [-7.28244, 3.6694, -18.5386]   vel: [70.3497, -0.14383, -0.314824]
x: [-7.74107, 3.53056, -18.0217]   vel: [70.6497, -0.14455, -0.314466]
x: [-8.16686, 3.38753, -17.4747]   vel: [70.9457, -0.145272, -0.314016]
x: [-8.55762, 3.24087, -16.8994]   vel: [71.2374, -0.145986, -0.313479]
x: [-8.91129, 3.09117, -16.2979]   vel: [71.5247, -0.146683, -0.31286]
x: [-9.22594, 2.93905, -15.6724]   vel: [71.8074, -0.147359, -0.312166]
x: [-9.49978, 2.78514, -15.0253]   vel: [72.0851, -0.148014, -0.311402]
x: [-9.73118, 2.6301, -14.3591]   vel: [72.3576, -0.148653, -0.310574]
x: [-9.91866, 2.47461, -13.6766]   vel: [72.6247, -0.14928, -0.30969]
x: [-10.0609, 2.31935, -12.9803]   vel: [72.8861, -0.149897, -0.308755]
x: [-10.1569, 2.16503, -12.2734]   vel: [73.1416, -0.150502, -0.307776]
x: [-10.2057, 2.01235, -11.5586]   vel: [73.3908, -0.151092, -0.306762]
x: [-10.2066, 1.86204, -10.8392]   vel: [73.6336, -0.151664, -0.305717]
x: [-10.1591, 1.71479, -10.1183]   vel: [73.8696, -0.152216, -0.304651]
x: [-10.063, 1.57133, -9.39907]   vel: [74.0987, -0.152748, -0.30357]
x: [-9.91833, 1.43236, -8.6848]   vel: [74.3206, -0.153261, -0.302482]
x: [-9.72528, 1.29856, -7.97876]   vel: [74.535, -0.153755, -0.301393]
x: [-9.48433, 1.17062, -7.28423]   vel: [74.7417, -0.154231, -0.300312]
x: [-9.1962, 1.04919, -6.60448]   vel: [74.9406, -0.154687, -0.299245]
x: [-8.86184, 0.934897, -5.94274]   vel: [75.1314, -0.155124, -0.2982]
x: [-8.48245, 0.828352, -5.30222]   vel: [75.3139, -0.155539, -0.297183]
x: [-8.05949, 0.730128, -4.68603]   vel: [75.4881, -0.155933, -0.296202]
x: [-7.59462, 0.640762, -4.09721]   vel: [75.6537, -0.156304, -0.295263]
x: [-7.08976, 0.560754, -3.53869]   vel: [75.8106, -0.156654, -0.294373]
x: [-6.54703, 0.49056, -3.01326]   vel: [75.9588, -0.156982, -0.293537]
x: [-5.96878, 0.430594, -2.5236]   vel: [76.0981, -0.157288, -0.292763]
x: [-5.35758, 0.381218, -2.07221]   vel: [76.2285, -0.157573, -0.292055]
x: [-4.71613, 0.342745, -1.66143]   vel: [76.35, -0.157836, -0.29142]
x: [-4.04735, 0.315434, -1.29338]   vel: [76.4626, -0.158077, -0.290861]
x: [-3.35431, 0.299488, -0.970007]   vel: [76.5663, -0.158296, -0.290384]
x: [-2.64023, 0.295056, -0.693028]   vel: [76.6611, -0.158493, -0.289994]
x: [-1.90845, 0.302224, -0.463934]   vel: [76.7472, -0.158669, -0.289693]
x: [-1.16243, 0.321025, -0.28398]   vel: [76.8246, -0.158824, -0.289485]
x: [-0.405695, 0.351428, -0.154174]   vel: [76.8935, -0.158959, -0.289374]
x: [0.358131, 0.393345, -0.0752702]   vel: [76.954, -0.159074, -0.289362]
x: [1.12539, 0.446627, -0.0477643]   vel: [77.0063, -0.159169, -0.289451]
x: [1.89239, 0.511067, -0.0718913]   vel: [77.0507, -0.159246, -0.289642]
x: [2.65542, 0.586401, -0.147621]   vel: [77.0874, -0.159304, -0.289937]
x: [3.41081, 0.672307, -0.27466]   vel: [77.1165, -0.159345, -0.290337]
x: [4.15491, 0.768413, -0.452453]   vel: [77.1386, -0.159369, -0.29084]
x: [4.88411, 0.874289, -0.680186]   vel: [77.1537, -0.159377, -0.291447]
x: [5.59489, 0.989461, -0.956792]   vel: [77.1623, -0.159371, -0.292157]
x: [6.28383, 1.1134, -1.28096]   vel: [77.1647, -0.15935, -0.292968]
x: [6.94759, 1.24555, -1.65113]   vel: [77.1613, -0.159316, -0.293879]
x: [7.58298, 1.38529, -2.06552]   vel: [77.1525, -0.15927, -0.294886]
x: [8.18695, 1.53198, -2.52212]   vel: [77.1387, -0.159213, -0.295988]
x: [8.75661, 1.68494, -3.01873]   vel: [77.1202, -0.159146, -0.297179]
x: [9.28926, 1.84346, -3.55294]   vel: [77.0976, -0.159071, -0.298457]
x: [9.78236, 2.0068, -4.12217]   vel: [77.0712, -0.158987, -0.299817]
x: [10.2336, 2.17422, -4.72365]   vel: [77.0416, -0.158897, -0.301254]
x: [10.6408, 2.34492, -5.35449]   vel: [77.0091, -0.158801, -0.302762]
x: [11.0022, 2.51812, -6.01163]   vel: [76.9742, -0.158702, -0.304337]
x: [11.316, 2.69301, -6.69192]   vel: [76.9374, -0.158599, -0.305972]
x: [11.5808, 2.86881, -7.3921]   vel: [76.8991, -0.158494, -0.30766]
x: [11.7954, 3.04469, -8.10881]   vel: [76.8599, -0.158388, -0.309396]
x: [11.9589, 3.21985, -8.83864]   vel: [76.8201, -0.158282, -0.311171]
x: [12.0706, 3.39349, -9.57813]   vel: [76.7802, -0.158178, -0.31298]
x: [12.1299, 3.56482, -10.3238]   vel: [76.7406, -0.158076, -0.314814]
x: [12.1367, 3.73307, -11.072]   vel: [76.7018, -0.157978, -0.316665]
x: [12.0911, 3.89746, -11.8194]   vel: [76.6643, -0.157884, -0.318526]
x: [11.9932, 4.05728, -12.5623]   vel: [76.6283, -0.157796, -0.320389]
x: [11.8437, 4.21178, -13.2974]   vel: [76.5943, -0.157714, -0.322247]
x: [11.6432, 4.3603, -14.0211]   vel: [76.5628, -0.15764, -0.32409]
x: [11.3928, 4.50215, -14.7301]   vel: [76.534, -0.157573, -0.325912]
x: [11.0936, 4.63672, -15.4212]   vel: [76.5082, -0.157516, -0.327703]
x: [10.7472, 4.76342, -16.091]   vel: [76.4859, -0.157469, -0.329457]
x: [10.355, 4.88167, -16.7365]   vel: [76.4673, -0.157432, -0.331165]
x: [9.91909, 4.99096, -17.3548]   vel: [76.4528, -0.157406, -0.332821]
x: [9.44136, 5.09082, -17.9428]   vel: [76.4424, -0.157392, -0.334416]
x: [8.92408, 5.1808, -18.498]   vel: [76.4365, -0.15739, -0.335945]
x: [8.36964, 5.26051, -19.0177]   vel: [76.4353, -0.1574, -0.337399]
x: [7.78062, 5.32962, -19.4995]   vel: [76.439, -0.157423, -0.338772]
x: [7.15973, 5.38782, -19.9411]   vel: [76.4477, -0.157459, -0.340059]
x: [6.50985, 5.43486, -20.3406]   vel: [76.4615, -0.157509, -0.341254]
x: [5.83396, 5.47055, -20.6959]   vel: [76.4805, -0.157572, -0.342351]
x: [5.13518, 5.49472, -21.0054]   vel: [76.5048, -0.157648, -0.343346]
x: [4.41674, 5.50728, -21.2676]   vel: [76.5345, -0.157738, -0.344234]
x: [3.68194, 5.50819, -21.4813]   vel: [76.5694, -0.157842, -0.345012]
x: [2.93417, 5.49745, -21.6453]   vel: [76.6097, -0.157959, -0.345676]

In [44]: invalid command name "140178346830408_on_timer"
    while executing
"140178346830408_on_timer"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
init useless...

In [45]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [46]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [47]: invalid command name "140178346421832idle_draw"
    while executing
"140178346421832idle_draw"
    ("after" script)
from quatlib import *
...: 
...: from math import sin, cos, tan, atan2, pi 
...: import matplotlib.pyplot as plt
...: import numpy as np
...: 
...: import cmath
...: 
...: # import casadi library
...: #from casadi import *
...: ...
...: print('Sideslip:', initValues_circ['beta'])
...: print('Velocities:')
...: print(initValues_circ['vel'])
...: 
...: with open('steadyCircle' + '.yaml', 'w') as outfile:
...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
...: 
...: 
...: plt.show()
...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.0328470835070223
[0.08530261863161247]

Stable Circle flight with:
Thrust: 5.0838600158599645
Elevator: -0.024038331438368716
Rudder: -0.0008783279204183322
Circle Radius: 29.138524120778612
Angle of attack: [0.08530261863161247]
Sideslip: [0.01014672073194448]
Velocities:
[4.981563234523816, 0.050732733109881134, 0.4259740957286254]
End script

In [48]: """
    ...: Created on Wed Oct 11 23:20:36 2017
    ...: 
    ...: @author: lukas
    ...: """
    ...: # import libraries
    ...: from math import asin, atan2, sin, cos, pi, copysign
    ...: 
    ...: import numpy as np
    ...: from numpy import linalg as LA
    ...: ...
    ...:     cp = cos(pitch * 0.5)
    ...:     sp = sin(pitch * 0.5)
    ...: 
    ...:     # Calulate quaternion
    ...:     q = [cy * cr * cp + sy * sr * sp,
    ...:          cy * cr * sp - sy * sr * cp,
    ...:          cy * sr * cp + sy * cr * sp,
    ...:          sy * cr * cp - cy * sr * sp]
    ...:     
    ...:     return q

In [49]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [50]: invalid command name "140178349863560idle_draw"
    while executing
"140178349863560idle_draw"
    ("after" script)
from quatlib import *
...: 
...: from math import sin, cos, tan, atan2, pi 
...: import matplotlib.pyplot as plt
...: import numpy as np
...: 
...: import cmath
...: 
...: # import casadi library
...: #from casadi import *
...: ...
...: print('Sideslip:', initValues_circ['beta'])
...: print('Velocities:')
...: print(initValues_circ['vel'])
...: 
...: with open('steadyCircle' + '.yaml', 'w') as outfile:
...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
...: 
...: 
...: plt.show()
...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.03386558562667555
[0.09094460653277728]

Stable Circle flight with:
Thrust: 5.0560274329888575
Elevator: -0.042607390433938366
Rudder: -0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09094460653277728]
Sideslip: [0.03981817800661717]
Velocities:
[4.975390127891296, 0.19903828485722647, 0.45373652756080324]
End script

In [51]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [52]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: print('Sideslip:', initValues_circ['beta'])
    ...: print('Velocities:')
    ...: print(initValues_circ['vel'])
    ...: 
    ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
    ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.03386558562667555
[0.09094460653277728]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-52-08543d8759fa> in <module>()
----> 1 import codecs, os, ast;__pyfile = codecs.open('''/tmp/py12369Pgd''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/py12369Pgd''');__block = ast.parse(__code, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec');__last = __block.body[-1];__isexpr = isinstance(__last,ast.Expr);__block.body.pop() if __isexpr else None;exec(compile(__block, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec'));eval(compile(ast.Expression(__last.value), '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='eval')) if __isexpr else None

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in <module>()
    480 mu = 20/180*pi # rad
    481 
--> 482 initValues_circ = steadyLevel_circle(mu, Vel)
    483 #initValues_circ = steadyLevel_circle(mu, Vel)
    484 

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in steadyLevel_circle(mu, vel)
    261     x = [0, r ,0]
    262 
--> 263     q = eul2quat([mu, alpha,0])
    264 
    265     # Create output dictionnary

/home/lukas/Code/AirborneWindEnergy/python/quatlib.py in eul2quat(eulAngles)
     73     cy = cos(yaw * 0.5)
     74     sy = sin(yaw * 0.5)
---> 75     cr = cos(roll * 0.5)
     76     sr = sin(roll * 0.5)
     77     cp = cos(pitch * 0.5)

TypeError: can't multiply sequence by non-int of type 'float'

In [53]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: print('Sideslip:', initValues_circ['beta'])
    ...: print('Velocities:')
    ...: print(initValues_circ['vel'])
    ...: 
    ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
    ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.03386558562667555
[0.09094460653277728]

Stable Circle flight with:
Thrust: 5.0560274329888575
Elevator: -0.042607390433938366
Rudder: -0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09094460653277728]
Sideslip: [0.03981817800661717]
Velocities:
[4.975390127891296, 0.19903828485722647, 0.45373652756080324]
End script

In [54]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [55]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [56]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: print('Sideslip:', initValues_circ['beta'])
    ...: print('Velocities:')
    ...: print(initValues_circ['vel'])
    ...: 
    ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
    ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.03431394908034423
[0.09334417442460441]

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661717]
Velocities:
[4.974287033375871, -0.19903828485722647, 0.46567399621383687]
End script

In [57]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [58]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [59]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [60]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: print('Sideslip:', initValues_circ['beta'])
    ...: print('Velocities:')
    ...: print(initValues_circ['vel'])
    ...: 
    ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
    ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.03431394908034423
[0.09334417442460441]

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661717]
Velocities:
[4.974287033375871, -0.19903828485722647, 0.46567399621383687]
End script

In [61]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [62]: invalid command name "140178345583944idle_draw"
    while executing
"140178345583944idle_draw"
    ("after" script)
from quatlib import *
...: 
...: from math import sin, cos, tan, atan2, pi 
...: import matplotlib.pyplot as plt
...: import numpy as np
...: 
...: import cmath
...: 
...: # import casadi library
...: #from casadi import *
...: ...
...: print('Sideslip:', initValues_circ['beta'])
...: print('Velocities:')
...: print(initValues_circ['vel'])
...: 
...: with open('steadyCircle' + '.yaml', 'w') as outfile:
...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
...: 
...: 
...: plt.show()
...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-62-217732670480> in <module>()
----> 1 import codecs, os, ast;__pyfile = codecs.open('''/tmp/py12369Uzo''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/py12369Uzo''');__block = ast.parse(__code, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec');__last = __block.body[-1];__isexpr = isinstance(__last,ast.Expr);__block.body.pop() if __isexpr else None;exec(compile(__block, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec'));eval(compile(ast.Expression(__last.value), '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='eval')) if __isexpr else None

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in <module>()
    508 mu = 20/180*pi # rad
    509 
--> 510 initValues_circ = steadyLevel_circle(mu, Vel)
    511 #initValues_circ = steadyLevel_circle(mu, Vel)
    512 

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in steadyLevel_circle(mu, vel)
    183     steadyState = {}
    184     steadyState['dE'] = dE
--> 185     steadyState['dR'] = dR
    186     steadyState['alpha'] = alpha
    187     steadyState['beta'] = beta

NameError: name 'dR' is not defined

In [63]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: print('Sideslip:', initValues_circ['beta'])
    ...: print('Velocities:')
    ...: print(initValues_circ['vel'])
    ...: 
    ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
    ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.03431394908034423
[0.09334417442460441]

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [64]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [65]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: print('Sideslip:', initValues_circ['beta'])
    ...: print('Velocities:')
    ...: print(initValues_circ['vel'])
    ...: 
    ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
    ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
omega 0.7138657395733307
cd: 0.03431394908034423
[0.09334417442460441]

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [66]: pri
