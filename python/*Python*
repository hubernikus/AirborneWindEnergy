Python 3.5.2 (default, Sep 14 2017, 22:51:06) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: 
In [2]: 
In [3]: 
In [4]: from quatlib import *
   ...: 
   ...: from math import sin, cos, tan, atan2, pi 
   ...: import matplotlib.pyplot as plt
   ...: import numpy as np
   ...: 
   ...: import cmath
   ...: 
   ...: # import casadi library
   ...: #from casadi import *
   ...: ...
   ...: print('Sideslip:', initValues_circ['beta'])
   ...: print('Velocities:')
   ...: print(initValues_circ['vel'])
   ...: 
   ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
   ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
   ...: 
   ...: 
   ...: plt.show()
   ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
omega 0.7138657395733307
cd: 0.03431394908034423
[0.09334417442460441]
0.029581321915403788

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
---------------------------------------------------------------------------
RepresenterError                          Traceback (most recent call last)
<ipython-input-4-dd6603d487d7> in <module>()
----> 1 import codecs, os, ast;__pyfile = codecs.open('''/tmp/py12369bWq''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/py12369bWq''');__block = ast.parse(__code, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec');__last = __block.body[-1];__isexpr = isinstance(__last,ast.Expr);__block.body.pop() if __isexpr else None;exec(compile(__block, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec'));eval(compile(ast.Expression(__last.value), '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='eval')) if __isexpr else None

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in <module>()
    532 
    533 with open('steadyCircle' + '.yaml', 'w') as outfile:
--> 534         yaml.dump(initValues_circ, outfile, default_flow_style=False)
    535 
    536 

/usr/local/lib/python3.5/dist-packages/yaml/__init__.py in dump(data, stream, Dumper, **kwds)
    215     If stream is None, return the produced string instead.
    216     """
--> 217     return dump_all([data], stream, Dumper=Dumper, **kwds)
    218 safe_dump = dump
    219 

/usr/local/lib/python3.5/dist-packages/yaml/__init__.py in dump_all(documents, stream, Dumper, default_style, default_flow_style, canonical, indent, width, allow_unicode, line_break, encoding, explicit_start, explicit_end, version, tags)
    194         dumper.open()
    195         for data in documents:
--> 196             dumper.represent(data)
    197         dumper.close()
    198     finally:

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent(self, data)
     24 
     25     def represent(self, data):
---> 26         node = self.represent_data(data)
     27         self.serialize(node)
     28         self.represented_objects = {}

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_data(self, data)
     45         data_types = type(data).__mro__
     46         if data_types[0] in self.yaml_representers:
---> 47             node = self.yaml_representers[data_types[0]](self, data)
     48         else:
     49             for data_type in data_types:

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_dict(self, data)
    203 
    204     def represent_dict(self, data):
--> 205         return self.represent_mapping('tag:yaml.org,2002:map', data)
    206 
    207     def represent_set(self, data):

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_mapping(self, tag, mapping, flow_style)
    114         for item_key, item_value in mapping:
    115             node_key = self.represent_data(item_key)
--> 116             node_value = self.represent_data(item_value)
    117             if not (isinstance(node_key, ScalarNode) and not node_key.style):
    118                 best_style = False

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_data(self, data)
     55                     node = self.yaml_multi_representers[None](self, data)
     56                 elif None in self.yaml_representers:
---> 57                     node = self.yaml_representers[None](self, data)
     58                 else:
     59                     node = ScalarNode(None, str(data))

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_undefined(self, data)
    227 
    228     def represent_undefined(self, data):
--> 229         raise RepresenterError("cannot represent an object", data)
    230 
    231 SafeRepresenter.add_representer(type(None),

RepresenterError: ('cannot represent an object', array([ 0.98373535,  0.17345908,  0.04594635, -0.00810158]))

In [5]: from quatlib import *
   ...: 
   ...: from math import sin, cos, tan, atan2, pi 
   ...: import matplotlib.pyplot as plt
   ...: import numpy as np
   ...: 
   ...: import cmath
   ...: 
   ...: # import casadi library
   ...: #from casadi import *
   ...: ...
   ...: print('Sideslip:', initValues_circ['beta'])
   ...: print('Velocities:')
   ...: print(initValues_circ['vel'])
   ...: 
   ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
   ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
   ...: 
   ...: 
   ...: plt.show()
   ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
omega 0.7138657395733307
cd: 0.03431394908034423
[0.09334417442460441]
0.029581321915403788

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
---------------------------------------------------------------------------
RepresenterError                          Traceback (most recent call last)
<ipython-input-5-6e9bf2a70317> in <module>()
----> 1 import codecs, os, ast;__pyfile = codecs.open('''/tmp/py12369n0F''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/py12369n0F''');__block = ast.parse(__code, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec');__last = __block.body[-1];__isexpr = isinstance(__last,ast.Expr);__block.body.pop() if __isexpr else None;exec(compile(__block, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec'));eval(compile(ast.Expression(__last.value), '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='eval')) if __isexpr else None

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in <module>()
    532 
    533 with open('steadyCircle' + '.yaml', 'w') as outfile:
--> 534         yaml.dump(initValues_circ, outfile, default_flow_style=False)
    535 
    536 

/usr/local/lib/python3.5/dist-packages/yaml/__init__.py in dump(data, stream, Dumper, **kwds)
    215     If stream is None, return the produced string instead.
    216     """
--> 217     return dump_all([data], stream, Dumper=Dumper, **kwds)
    218 safe_dump = dump
    219 

/usr/local/lib/python3.5/dist-packages/yaml/__init__.py in dump_all(documents, stream, Dumper, default_style, default_flow_style, canonical, indent, width, allow_unicode, line_break, encoding, explicit_start, explicit_end, version, tags)
    194         dumper.open()
    195         for data in documents:
--> 196             dumper.represent(data)
    197         dumper.close()
    198     finally:

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent(self, data)
     24 
     25     def represent(self, data):
---> 26         node = self.represent_data(data)
     27         self.serialize(node)
     28         self.represented_objects = {}

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_data(self, data)
     45         data_types = type(data).__mro__
     46         if data_types[0] in self.yaml_representers:
---> 47             node = self.yaml_representers[data_types[0]](self, data)
     48         else:
     49             for data_type in data_types:

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_dict(self, data)
    203 
    204     def represent_dict(self, data):
--> 205         return self.represent_mapping('tag:yaml.org,2002:map', data)
    206 
    207     def represent_set(self, data):

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_mapping(self, tag, mapping, flow_style)
    114         for item_key, item_value in mapping:
    115             node_key = self.represent_data(item_key)
--> 116             node_value = self.represent_data(item_value)
    117             if not (isinstance(node_key, ScalarNode) and not node_key.style):
    118                 best_style = False

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_data(self, data)
     55                     node = self.yaml_multi_representers[None](self, data)
     56                 elif None in self.yaml_representers:
---> 57                     node = self.yaml_representers[None](self, data)
     58                 else:
     59                     node = ScalarNode(None, str(data))

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_undefined(self, data)
    227 
    228     def represent_undefined(self, data):
--> 229         raise RepresenterError("cannot represent an object", data)
    230 
    231 SafeRepresenter.add_representer(type(None),

RepresenterError: ('cannot represent an object', array([ 0.98373535,  0.17345908,  0.04594635, -0.00810158]))

In [6]: from quatlib import *
   ...: 
   ...: from math import sin, cos, tan, atan2, pi 
   ...: import matplotlib.pyplot as plt
   ...: import numpy as np
   ...: 
   ...: import cmath
   ...: 
   ...: # import casadi library
   ...: #from casadi import *
   ...: ...
   ...: print('Sideslip:', initValues_circ['beta'])
   ...: print('Velocities:')
   ...: print(initValues_circ['vel'])
   ...: 
   ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
   ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
   ...: 
   ...: 
   ...: plt.show()
   ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
omega 0.7138657395733307
cd: 0.03431394908034423
[0.09334417442460441]
0.029581321915403788

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
---------------------------------------------------------------------------
RepresenterError                          Traceback (most recent call last)
<ipython-input-6-1b6be20a6e19> in <module>()
----> 1 import codecs, os, ast;__pyfile = codecs.open('''/tmp/py12369onk''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/py12369onk''');__block = ast.parse(__code, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec');__last = __block.body[-1];__isexpr = isinstance(__last,ast.Expr);__block.body.pop() if __isexpr else None;exec(compile(__block, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec'));eval(compile(ast.Expression(__last.value), '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='eval')) if __isexpr else None

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in <module>()
    532 
    533 with open('steadyCircle' + '.yaml', 'w') as outfile:
--> 534         yaml.dump(initValues_circ, outfile, default_flow_style=False)
    535 
    536 

/usr/local/lib/python3.5/dist-packages/yaml/__init__.py in dump(data, stream, Dumper, **kwds)
    215     If stream is None, return the produced string instead.
    216     """
--> 217     return dump_all([data], stream, Dumper=Dumper, **kwds)
    218 safe_dump = dump
    219 

/usr/local/lib/python3.5/dist-packages/yaml/__init__.py in dump_all(documents, stream, Dumper, default_style, default_flow_style, canonical, indent, width, allow_unicode, line_break, encoding, explicit_start, explicit_end, version, tags)
    194         dumper.open()
    195         for data in documents:
--> 196             dumper.represent(data)
    197         dumper.close()
    198     finally:

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent(self, data)
     24 
     25     def represent(self, data):
---> 26         node = self.represent_data(data)
     27         self.serialize(node)
     28         self.represented_objects = {}

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_data(self, data)
     45         data_types = type(data).__mro__
     46         if data_types[0] in self.yaml_representers:
---> 47             node = self.yaml_representers[data_types[0]](self, data)
     48         else:
     49             for data_type in data_types:

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_dict(self, data)
    203 
    204     def represent_dict(self, data):
--> 205         return self.represent_mapping('tag:yaml.org,2002:map', data)
    206 
    207     def represent_set(self, data):

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_mapping(self, tag, mapping, flow_style)
    114         for item_key, item_value in mapping:
    115             node_key = self.represent_data(item_key)
--> 116             node_value = self.represent_data(item_value)
    117             if not (isinstance(node_key, ScalarNode) and not node_key.style):
    118                 best_style = False

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_data(self, data)
     55                     node = self.yaml_multi_representers[None](self, data)
     56                 elif None in self.yaml_representers:
---> 57                     node = self.yaml_representers[None](self, data)
     58                 else:
     59                     node = ScalarNode(None, str(data))

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_undefined(self, data)
    227 
    228     def represent_undefined(self, data):
--> 229         raise RepresenterError("cannot represent an object", data)
    230 
    231 SafeRepresenter.add_representer(type(None),

RepresenterError: ('cannot represent an object', array([ 0.98373535,  0.17345908,  0.04594635, -0.00810158]))

In [7]: from quatlib import *
   ...: 
   ...: from math import sin, cos, tan, atan2, pi 
   ...: import matplotlib.pyplot as plt
   ...: import numpy as np
   ...: 
   ...: import cmath
   ...: 
   ...: # import casadi library
   ...: #from casadi import *
   ...: ...
   ...: print('Sideslip:', initValues_circ['beta'])
   ...: print('Velocities:')
   ...: print(initValues_circ['vel'])
   ...: 
   ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
   ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
   ...: 
   ...: 
   ...: plt.show()
   ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
omega 0.7138657395733307
cd: 0.03431394908034423
[0.09334417442460441]
0.029581321915403788

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
---------------------------------------------------------------------------
RepresenterError                          Traceback (most recent call last)
<ipython-input-7-539ed368235e> in <module>()
----> 1 import codecs, os, ast;__pyfile = codecs.open('''/tmp/py12369CDl''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/py12369CDl''');__block = ast.parse(__code, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec');__last = __block.body[-1];__isexpr = isinstance(__last,ast.Expr);__block.body.pop() if __isexpr else None;exec(compile(__block, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec'));eval(compile(ast.Expression(__last.value), '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='eval')) if __isexpr else None

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in <module>()
    532 
    533 with open('steadyCircle' + '.yaml', 'w') as outfile:
--> 534         yaml.dump(initValues_circ, outfile, default_flow_style=False)
    535 
    536 

/usr/local/lib/python3.5/dist-packages/yaml/__init__.py in dump(data, stream, Dumper, **kwds)
    215     If stream is None, return the produced string instead.
    216     """
--> 217     return dump_all([data], stream, Dumper=Dumper, **kwds)
    218 safe_dump = dump
    219 

/usr/local/lib/python3.5/dist-packages/yaml/__init__.py in dump_all(documents, stream, Dumper, default_style, default_flow_style, canonical, indent, width, allow_unicode, line_break, encoding, explicit_start, explicit_end, version, tags)
    194         dumper.open()
    195         for data in documents:
--> 196             dumper.represent(data)
    197         dumper.close()
    198     finally:

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent(self, data)
     24 
     25     def represent(self, data):
---> 26         node = self.represent_data(data)
     27         self.serialize(node)
     28         self.represented_objects = {}

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_data(self, data)
     45         data_types = type(data).__mro__
     46         if data_types[0] in self.yaml_representers:
---> 47             node = self.yaml_representers[data_types[0]](self, data)
     48         else:
     49             for data_type in data_types:

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_dict(self, data)
    203 
    204     def represent_dict(self, data):
--> 205         return self.represent_mapping('tag:yaml.org,2002:map', data)
    206 
    207     def represent_set(self, data):

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_mapping(self, tag, mapping, flow_style)
    114         for item_key, item_value in mapping:
    115             node_key = self.represent_data(item_key)
--> 116             node_value = self.represent_data(item_value)
    117             if not (isinstance(node_key, ScalarNode) and not node_key.style):
    118                 best_style = False

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_data(self, data)
     55                     node = self.yaml_multi_representers[None](self, data)
     56                 elif None in self.yaml_representers:
---> 57                     node = self.yaml_representers[None](self, data)
     58                 else:
     59                     node = ScalarNode(None, str(data))

/usr/local/lib/python3.5/dist-packages/yaml/representer.py in represent_undefined(self, data)
    227 
    228     def represent_undefined(self, data):
--> 229         raise RepresenterError("cannot represent an object", data)
    230 
    231 SafeRepresenter.add_representer(type(None),

RepresenterError: ('cannot represent an object', array([ 0.98373535,  0.17345908,  0.04594635, -0.00810158]))

In [8]: 
exit()

In [8]: 
Process Python finished
Python 3.5.2 (default, Sep 14 2017, 22:51:06) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: 
In [2]: 
In [3]: 
In [4]: from quatlib import *
   ...: 
   ...: from math import sin, cos, tan, atan2, pi 
   ...: import matplotlib.pyplot as plt
   ...: import numpy as np
   ...: 
   ...: import cmath
   ...: 
   ...: # import casadi library
   ...: #from casadi import *
   ...: ...
   ...: print('Sideslip:', initValues_circ['beta'])
   ...: print('Velocities:')
   ...: print(initValues_circ['vel'])
   ...: 
   ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
   ...:         yaml.dump(initValues_circ, outfile, default_flow_style=False)
   ...: 
   ...: 
   ...: plt.show()
   ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
omega 0.7138657395733307
cd: 0.03431394908034423
[0.09334417442460441]
0.029581321915403788

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [5]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()
  File "/home/lukas/Code/AirborneWindEnergy/python/kite_sim.py", line 403
    if(PLOT_RESULT]S):
                  ^
SyntaxError: invalid syntax


In [6]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()
init useless...
Exception in Tkinter callback
Traceback (most recent call last):
  File "/usr/lib/python3.5/tkinter/__init__.py", line 1553, in __call__
    return self.func(*args)
  File "/usr/lib/python3.5/tkinter/__init__.py", line 599, in callit
    func(*args)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/backends/backend_tkagg.py", line 95, in _on_timer
    TimerBase._on_timer(self)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/backend_bases.py", line 1382, in _on_timer
    ret = func(*args, **kwargs)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1542, in _step
    still_going = Animation._step(self, *args)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1277, in _step
    self._draw_next_frame(framedata, self._blit)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1296, in _draw_next_frame
    self._draw_frame(framedata)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1814, in _draw_frame
    self._drawn_artists = self._func(framedata, *self._args)
  File "/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py", line 230, in update3d_aircraft
    dVel = vel_I*lPred/np.linalg.norm(vel_I)
NameError: name 'lPred' is not defined

In [7]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()
init useless...
Exception in Tkinter callback
Traceback (most recent call last):
  File "/usr/lib/python3.5/tkinter/__init__.py", line 1553, in __call__
    return self.func(*args)
  File "/usr/lib/python3.5/tkinter/__init__.py", line 599, in callit
    func(*args)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/backends/backend_tkagg.py", line 95, in _on_timer
    TimerBase._on_timer(self)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/backend_bases.py", line 1382, in _on_timer
    ret = func(*args, **kwargs)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1542, in _step
    still_going = Animation._step(self, *args)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1277, in _step
    self._draw_next_frame(framedata, self._blit)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1296, in _draw_next_frame
    self._draw_frame(framedata)
  File "/usr/local/lib/python3.5/dist-packages/matplotlib/animation.py", line 1814, in _draw_frame
    self._drawn_artists = self._func(framedata, *self._args)
  File "/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py", line 230, in update3d_aircraft
    dVel = vel_I*lPred/np.linalg.norm(vel_I)
NameError: name 'lPred' is not defined

In [8]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()
init useless...

In [9]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()
x: [0, 0, 0]   vel: [4.974287033375871, -0.19903828485722644, 0.46567399621383687]
x: [0.0554058, -0.00328582, -0.00151109]   vel: [6.08838, -0.128627, 0.42908]
x: [0.12185, -0.00622635, -0.0042527]   vel: [7.19822, -0.0513665, 0.372294]
x: [0.199281, -0.00885037, -0.00837098]   vel: [8.30289, 0.0319527, 0.302872]
x: [0.287645, -0.0112051, -0.0139638]   vel: [9.40185, 0.120129, 0.228531]
x: [0.386887, -0.0133504, -0.0210939]   vel: [10.4948, 0.211467, 0.155861]
x: [0.49695, -0.0153503, -0.0298081]   vel: [11.5818, 0.303723, 0.089479]
x: [0.617773, -0.0172638, -0.0401573]   vel: [12.6628, 0.394093, 0.0317649]
x: [0.749288, -0.0191373, -0.0522119]   vel: [13.7377, 0.479248, -0.0168921]
x: [0.891423, -0.0209983, -0.0660717]   vel: [14.8066, 0.555437, -0.0574965]
x: [1.0441, -0.0228531, -0.0818673]   vel: [15.8694, 0.618668, -0.091756]
x: [1.20722, -0.0246851, -0.0997579]   vel: [16.9259, 0.664959, -0.121491]
x: [1.3807, -0.0264546, -0.119925]   vel: [17.9761, 0.690666, -0.148249]
x: [1.56442, -0.0280995, -0.142566]   vel: [19.0196, 0.69286, -0.173149]
x: [1.75828, -0.0295357, -0.167889]   vel: [20.056, 0.669736, -0.196882]
x: [1.96216, -0.0306582, -0.19611]   vel: [21.0849, 0.620995, -0.219805]
x: [2.17592, -0.0313416, -0.227449]   vel: [22.1055, 0.548177, -0.242061]
x: [2.39944, -0.0314427, -0.262132]   vel: [23.1173, 0.454843, -0.263681]
x: [2.63256, -0.0308024, -0.300389]   vel: [24.1195, 0.346587, -0.284653]
x: [2.87513, -0.0292502, -0.342457]   vel: [25.1116, 0.230794, -0.304973]
x: [3.12699, -0.0266082, -0.388578]   vel: [26.0931, 0.116166, -0.324661]
x: [3.38795, -0.022697, -0.439006]   vel: [27.0638, 0.0119699, -0.343767]
x: [3.65782, -0.0173407, -0.494]   vel: [28.0235, -0.0728931, -0.362365]
x: [3.93639, -0.0103731, -0.553831]   vel: [28.9722, -0.130934, -0.380533]
x: [4.22345, -0.00164164, -0.618779]   vel: [29.91, -0.157079, -0.398333]
x: [4.51877, 0.00898913, -0.689134]   vel: [30.8365, -0.149497, -0.415801]
x: [4.82211, 0.0216364, -0.765194]   vel: [31.7516, -0.110072, -0.432941]
x: [5.1332, 0.0364, -0.847265]   vel: [32.655, -0.0444135, -0.449736]
x: [5.45177, 0.0533651, -0.935659]   vel: [33.5462, 0.0386797, -0.466164]
x: [5.77755, 0.0726072, -1.03069]   vel: [34.4251, 0.12828, -0.482218]
x: [6.11022, 0.0941973, -1.13268]   vel: [35.2914, 0.2128, -0.497915]
x: [6.44949, 0.118208, -1.24195]   vel: [36.1452, 0.281676, -0.513291]
x: [6.79502, 0.144719, -1.35879]   vel: [36.9865, 0.326974, -0.528391]
x: [7.14648, 0.173822, -1.48352]   vel: [37.8152, 0.34464, -0.543248]
x: [7.50351, 0.205618, -1.61643]   vel: [38.6313, 0.33513, -0.557875]
x: [7.86576, 0.240224, -1.7578]   vel: [39.4347, 0.303257, -0.572266]
x: [8.23284, 0.277763, -1.9079]   vel: [40.2252, 0.257262, -0.586405]
x: [8.60437, 0.318366, -2.067]   vel: [41.0026, 0.207226, -0.600277]
x: [8.97995, 0.362159, -2.23534]   vel: [41.7669, 0.163141, -0.613875]
x: [9.35916, 0.409266, -2.41318]   vel: [42.5179, 0.133021, -0.627204]
x: [9.74156, 0.459797, -2.60075]   vel: [43.2557, 0.121444, -0.640272]
x: [10.1267, 0.513847, -2.79828]   vel: [43.9802, 0.128849, -0.653085]
x: [10.5142, 0.571501, -3.00601]   vel: [44.6916, 0.151738, -0.665645]
x: [10.9036, 0.632828, -3.22413]   vel: [45.3898, 0.183726, -0.677956]
x: [11.2943, 0.697886, -3.45286]   vel: [46.0749, 0.217174, -0.690024]
x: [11.6858, 0.766732, -3.69238]   vel: [46.7469, 0.245028, -0.70186]
x: [12.0778, 0.839415, -3.94287]   vel: [47.4059, 0.262373, -0.713474]
x: [12.4697, 0.915989, -4.20448]   vel: [48.052, 0.267388, -0.724874]
x: [12.8609, 0.996504, -4.47736]   vel: [48.6853, 0.261446, -0.736064]
x: [13.251, 1.08101, -4.76161]   vel: [49.3059, 0.248418, -0.747043]
x: [13.6395, 1.16956, -5.05735]   vel: [49.9137, 0.233397, -0.757807]
x: [14.0257, 1.2622, -5.36465]   vel: [50.509, 0.22123, -0.768356]
x: [14.4092, 1.35896, -5.68359]   vel: [51.0917, 0.215266, -0.778691]
x: [14.7893, 1.45986, -6.01421]   vel: [51.662, 0.216656, -0.788814]
x: [15.1657, 1.56493, -6.35653]   vel: [52.2201, 0.224336, -0.798728]
x: [15.5376, 1.67415, -6.71059]   vel: [52.766, 0.235639, -0.808439]
x: [15.9046, 1.78754, -7.07635]   vel: [53.2999, 0.24729, -0.817953]
x: [16.2661, 1.90506, -7.45381]   vel: [53.822, 0.256458, -0.827274]
x: [16.6215, 2.02671, -7.84291]   vel: [54.3325, 0.261517, -0.83641]
x: [16.9702, 2.15246, -8.24358]   vel: [54.8315, 0.262352, -0.845362]
x: [17.3118, 2.28228, -8.65574]   vel: [55.3191, 0.260147, -0.854134]
x: [17.6457, 2.41612, -9.07926]   vel: [55.7956, 0.256806, -0.862727]
x: [17.9712, 2.55396, -9.51403]   vel: [56.2611, 0.254224, -0.871143]
x: [18.2879, 2.69572, -9.95987]   vel: [56.7157, 0.253684, -0.879385]
x: [18.5952, 2.84137, -10.4166]   vel: [57.1597, 0.25555, -0.887453]
x: [18.8926, 2.99081, -10.8841]   vel: [57.5932, 0.259302, -0.895354]
x: [19.1795, 3.14398, -11.3621]   vel: [58.0165, 0.263881, -0.90309]
x: [19.4554, 3.30079, -11.8503]   vel: [58.4297, 0.268141, -0.910666]

In [10]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [11]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...

In [12]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
init useless...
init useless...

In [13]: invalid command name "140713504490888idle_draw"
    while executing
"140713504490888idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
init useless...

In [14]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: 
    ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
omega 0.7138657395733307
cd: 0.03431394908034423
[0.09334417442460441]
0.029581321915403788

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [15]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: 
    ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
omega 0.7138657395733307
cd: 0.03431394908034423
[0.09334417442460441]
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-15-7007e9a0ae9a> in <module>()
----> 1 import codecs, os, ast;__pyfile = codecs.open('''/tmp/py12369vfC''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/py12369vfC''');__block = ast.parse(__code, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec');__last = __block.body[-1];__isexpr = isinstance(__last,ast.Expr);__block.body.pop() if __isexpr else None;exec(compile(__block, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec'));eval(compile(ast.Expression(__last.value), '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='eval')) if __isexpr else None

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in <module>()
    523 
    524 initValues_circ = steadyLevel_circle(mu, Vel)
--> 525 initValues_circ2 = steadyLevel_circle2(mu, Vel)
    526 #initValues_circ = steadyLevel_circle(mu, Vel)
    527 

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in steadyLevel_circle2(mu, vel)
    183     T = 0.5*ro*vel**2*S*CD0_tot + 2*K*(Mass*g)**2/(ro*vel**2*S*(cos(mu))**2)
    184 
--> 185     C_n0_bar = (Cnr*w_bar[2] + Cnp*w_bar[0]) + Cn0
    186     C_l0_bar = (Clr*w_bar[2] + Clp*w_bar[0]) + Cl0
    187 

NameError: name 'w_bar' is not defined

In [16]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: 
    ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.03431394908034423
[0.09334417442460441]
0.029581321915403788

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [17]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: 
    ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.03431394908034423
[0.09334417442460441]
Thrust2 0.029581321915403788

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [18]: 
exit()

In [18]: 
Process Python finished
Python 3.5.2 (default, Sep 14 2017, 22:51:06) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: 
In [2]: 
In [3]: 
In [4]: from quatlib import *
   ...: 
   ...: from math import sin, cos, tan, atan2, pi 
   ...: import matplotlib.pyplot as plt
   ...: import numpy as np
   ...: 
   ...: import cmath
   ...: 
   ...: # import casadi library
   ...: #from casadi import *
   ...: ...
   ...: 
   ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
   ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
   ...: 
   ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
   ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
   ...: 
   ...: 
   ...: plt.show()
   ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.03431394908034423
[0.09334417442460441]
Thrust2 0.029581321915403788

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [5]: from quatlib import *
   ...: 
   ...: from math import sin, cos, tan, atan2, pi 
   ...: import matplotlib.pyplot as plt
   ...: import numpy as np
   ...: 
   ...: import cmath
   ...: 
   ...: # import casadi library
   ...: #from casadi import *
   ...: ...
   ...: 
   ...: with open('steadyCircle' + '.yaml', 'w') as outfile:
   ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
   ...: 
   ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
   ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
   ...: 
   ...: 
   ...: plt.show()
   ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.03431394908034423
[0.09334417442460441]
Thrust2 0.029581321915403788

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [6]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()
Control with [T, dE, dR] [4.926417084373928, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [7]: """
   ...: First Aircraft simulation
   ...: """
   ...: import numpy as np
   ...: import matplotlib.pyplot as plt
   ...: from matplotlib.animation import FuncAnimation
   ...: 
   ...: # 3D Animation utils
   ...: from mpl_toolkits.mplot3d import Axes3D
   ...: import mpl_toolkits.mplot3d.art3d as art3d
   ...: ...
   ...: if visual == 2:
   ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                         init_func=init, blit=True)
   ...: elif visual == 3:
   ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     init_func=init3d, blit=False)
   ...: 
   ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
   ...:                     #init_func=init, blit=True)
   ...: plt.show()
Control with [T, dE, dR] [0.022282250612755978, 0.0, 0]
init useless...

In [8]: invalid command name "140405114052488idle_draw"
    while executing
"140405114052488idle_draw"
    ("after" script)
from quatlib import *
...: 
...: from math import sin, cos, tan, atan2, pi 
...: import matplotlib.pyplot as plt
...: import numpy as np
...: 
...: import cmath
...: 
...: # import casadi library
...: #from casadi import *
...: ...
...: 
...: with open('steadyCircle' + '.yaml', 'w') as outfile:
...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
...: 
...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
...: 
...: 
...: plt.show()
...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
cd: 0.03431394908034423
[0.09334417442460441]
Thrust2 0.029581321915403788

Stable Circle flight with:
Thrust: 4.926417084373928
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: [0.09334417442460441]
Sideslip: [-0.03981817800661716]
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [9]: from quatlib import *
   ...: 
   ...: from math import sin, cos, tan, atan2, pi 
   ...: import matplotlib.pyplot as plt
   ...: import numpy as np
   ...: 
   ...: import cmath
   ...: 
   ...: # import casadi library
   ...: #from casadi import *
   ...: ...
   ...: 
   ...: with open('steadyCircle3' + '.yaml', 'w') as outfile:
   ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
   ...: 
   ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
   ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
   ...: 
   ...: 
   ...: plt.show()
   ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
Thrust 0.030207251848453034
0.09334417442460441
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-9-e7e60108cc11> in <module>()
----> 1 import codecs, os, ast;__pyfile = codecs.open('''/tmp/py12369GJr''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/py12369GJr''');__block = ast.parse(__code, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec');__last = __block.body[-1];__isexpr = isinstance(__last,ast.Expr);__block.body.pop() if __isexpr else None;exec(compile(__block, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec'));eval(compile(ast.Expression(__last.value), '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='eval')) if __isexpr else None

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in <module>()
    533 mu = 20/180*pi # rad
    534 
--> 535 initValues_circ = steadyLevel_circle(mu, Vel)
    536 initValues_circ2 = steadyLevel_circle2(mu, Vel)
    537 #initValues_circ = steadyLevel_circle(mu, Vel)

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in steadyLevel_circle(mu, vel)
    309     print(alpha)
    310     i = 0
--> 311     vel = [cos(alpha[i])*cos(beta[i])*vel,
    312            sin(beta[i])*vel,
    313            sin(alpha[i])*cos(beta[i])*vel]

TypeError: 'float' object is not subscriptable

In [10]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: 
    ...: with open('steadyCircle3' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
Thr 0.030207251848453034
0.09334417442460441
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-10-9c71ac0054f8> in <module>()
----> 1 import codecs, os, ast;__pyfile = codecs.open('''/tmp/py12369GQf''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/py12369GQf''');__block = ast.parse(__code, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec');__last = __block.body[-1];__isexpr = isinstance(__last,ast.Expr);__block.body.pop() if __isexpr else None;exec(compile(__block, '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='exec'));eval(compile(ast.Expression(__last.value), '''/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py''', mode='eval')) if __isexpr else None

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in <module>()
    533 mu = 20/180*pi # rad
    534 
--> 535 initValues_circ = steadyLevel_circle(mu, Vel)
    536 initValues_circ2 = steadyLevel_circle2(mu, Vel)
    537 #initValues_circ = steadyLevel_circle(mu, Vel)

/home/lukas/Code/AirborneWindEnergy/python/equilibriumSearch_steadyMotion.py in steadyLevel_circle(mu, vel)
    314     x = [0, r ,0]
    315 
--> 316     q = eul2quat([mu, alpha[0],0])
    317 
    318     # Create output dictionnary

TypeError: 'float' object is not subscriptable

In [11]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: 
    ...: with open('steadyCircle3' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
Thr 0.030207251848453034
0.09334417442460441
Thrust2 0.029581321915403788

Stable Circle flight with:
Thrust: 0.030207251848453034
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: 0.09334417442460441
Sideslip: -0.03981817800661716
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [12]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: 
    ...: with open('steadyCircle3' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
    ...: 
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
Thrust307 0.030207251848453034
Thrust2 0.029581321915403788

Stable Circle flight with:
Thrust: 0.030207251848453034
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: 0.09334417442460441
Sideslip: -0.03981817800661716
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [13]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...
init useless...

In [14]: invalid command name "140405115422664idle_draw"
    while executing
"140405115422664idle_draw"
    ("after" script)



In [14]: 
In [14]: 

In [14]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [15]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle
draw circle

In [16]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [17]: invalid command name "140405114957640idle_draw"
    while executing
"140405114957640idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [18]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [19]: invalid command name "140405114839496idle_draw"
    while executing
"140405114839496idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [20]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [21]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [22]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [23]: invalid command name "140405114751688idle_draw"
    while executing
"140405114751688idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [24]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [25]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [26]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: print(initValues_circ['vel'])
    ...: 
    ...: with open('steadyCircle3' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
Thrust307 0.030207251848453034
Thrust2 0.029581321915403788

Stable Circle flight with:
Thrust: 0.030207251848453034
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: 0.09334417442460441
Sideslip: -0.03981817800661716
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [27]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [28]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [29]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: print(initValues_circ['vel'])
    ...: 
    ...: with open('steadyCircle3' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
Thrust307 0.030207251848453034
Thrust2 0.029581321915403788

Stable Circle flight with:
Thrust: 0.030207251848453034
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: 0.09334417442460441
Sideslip: -0.03981817800661716
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [30]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...
init useless...
init useless...

In [31]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.022282250612755978, 0.0, 0]
init useless...

In [32]: invalid command name "140405114259592idle_draw"
    while executing
"140405114259592idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
Control with [T, dE, dR] [0.060057058906572515, 0.0, 0]
init useless...

In [33]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.060057058906572515, 0.0, 0]
x: [-15, 0, 0]   vel: [8.416280751074433, 0.0, 0.10219395776951837]
x: [-14.7475, 0, 7.42633e-19]   vel: [8.41628, 0, 0.102194]
x: [-14.495, 0, 1.90173e-18]   vel: [8.41628, 0, 0.102194]
x: [-14.2425, 0, 3.28892e-18]   vel: [8.41628, 0, 0.102194]
x: [-13.99, 0, 4.91695e-18]   vel: [8.41628, 0, 0.102194]
x: [-13.7375, 0, 6.78302e-18]   vel: [8.41628, 0, 0.102194]
x: [-13.485, 0, 9.0986e-18]   vel: [8.41628, 0, 0.102194]
x: [-13.2325, 0, 1.17963e-17]   vel: [8.41628, 0, 0.102194]
x: [-12.9799, 0, 1.49443e-17]   vel: [8.41628, 0, 0.102194]
x: [-12.7274, 0, 1.84743e-17]   vel: [8.41628, 0, 0.102194]
x: [-12.4749, 0, 2.24551e-17]   vel: [8.41628, 0, 0.102194]
x: [-12.2224, 0, 2.68177e-17]   vel: [8.41628, 0, 0.102194]
x: [-11.9699, 0, 3.16308e-17]   vel: [8.41628, 0, 0.102194]
x: [-11.7174, 0, 3.68264e-17]   vel: [8.41628, 0, 0.102194]
x: [-11.4649, 0, 4.24721e-17]   vel: [8.41628, 0, 0.102194]
x: [-11.2124, 0, 4.85004e-17]   vel: [8.41628, 0, 0.102194]
x: [-10.9599, 0, 5.49788e-17]   vel: [8.41628, 0, 0.102194]
x: [-10.7074, 0, 6.19761e-17]   vel: [8.41628, 0, 0.102194]
x: [-10.4549, 0, 6.94957e-17]   vel: [8.41628, 0, 0.102194]
x: [-10.2024, 0, 7.73971e-17]   vel: [8.41628, 0, 0.102194]
x: [-9.94986, 0, 8.57492e-17]   vel: [8.41628, 0, 0.102194]

In [34]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
x: [0, 0, 0]   vel: [4.974287033375871, -0.19903828485722644, 0.46567399621383687]
x: [0.149636, -0.00885964, -0.00271468]   vel: [4.97852, -0.000611234, 0.410065]
x: [0.299321, -0.014889, -0.00464379]   vel: [4.975, 0.190347, 0.38014]
x: [0.44907, -0.0183368, -0.00536864]   vel: [4.96637, 0.368718, 0.365856]
x: [0.598904, -0.0193694, -0.00472628]   vel: [4.95502, 0.530068, 0.360576]
x: [0.748845, -0.0181074, -0.00269892]   vel: [4.94326, 0.670819, 0.360077]
x: [0.898918, -0.0146468, 0.000655555]   vel: [4.93327, 0.788272, 0.361764]
x: [1.04915, -0.00907227, 0.00524615]   vel: [4.92702, 0.880587, 0.364096]
x: [1.19956, -0.00146255, 0.0109747]   vel: [4.92606, 0.946733, 0.366196]
x: [1.35018, 0.00810672, 0.0177514]   vel: [4.93146, 0.98643, 0.367601]
x: [1.50104, 0.0195635, 0.0255029]   vel: [4.94376, 1.00009, 0.368112]
x: [1.65217, 0.0328413, 0.0341763]   vel: [4.96292, 0.988745, 0.367693]
x: [1.80361, 0.0478815, 0.0437394]   vel: [4.98843, 0.954014, 0.366415]
x: [1.95538, 0.0646361, 0.0541783]   vel: [5.01935, 0.898031, 0.364413]
x: [2.10754, 0.0830707, 0.0654944]   vel: [5.0545, 0.823402, 0.361856]
x: [2.2601, 0.103166, 0.0776991]   vel: [5.09256, 0.733146, 0.358925]
x: [2.41311, 0.124918, 0.0908102]   vel: [5.13222, 0.63062, 0.35579]
x: [2.5666, 0.148341, 0.104847]   vel: [5.17235, 0.519433, 0.352594]
x: [2.72058, 0.173465, 0.119827]   vel: [5.21204, 0.403333, 0.349443]
x: [2.87509, 0.200333, 0.135763]   vel: [5.25071, 0.286107, 0.346392]
x: [3.03013, 0.229001, 0.152663]   vel: [5.28814, 0.171442, 0.343452]
x: [3.18572, 0.259537, 0.17053]   vel: [5.32439, 0.0628181, 0.340586]
x: [3.34186, 0.292016, 0.189361]   vel: [5.35983, -0.0366148, 0.337726]
x: [3.49855, 0.326514, 0.209152]   vel: [5.395, -0.124126, 0.334782]
x: [3.65578, 0.363112, 0.229896]   vel: [5.43052, -0.197483, 0.331661]
x: [3.81354, 0.401888, 0.251589]   vel: [5.46703, -0.255003, 0.32828]
x: [3.97183, 0.442914, 0.274228]   vel: [5.50508, -0.295597, 0.324581]
x: [4.13063, 0.486258, 0.297815]   vel: [5.54505, -0.318773, 0.320538]
x: [4.28992, 0.531976, 0.322354]   vel: [5.58715, -0.324634, 0.31616]
x: [4.4497, 0.580117, 0.347854]   vel: [5.63139, -0.313861, 0.311491]
x: [4.60995, 0.630716, 0.374324]   vel: [5.67757, -0.287676, 0.306603]
x: [4.77067, 0.683799, 0.401775]   vel: [5.7254, -0.247796, 0.301588]
x: [4.93186, 0.739381, 0.430215]   vel: [5.77447, -0.196362, 0.296545]
x: [5.09351, 0.797465, 0.459647]   vel: [5.82437, -0.135865, 0.291571]
x: [5.25564, 0.858048, 0.490071]   vel: [5.87473, -0.069052, 0.286747]
x: [5.41823, 0.921117, 0.521476]   vel: [5.92527, 0.00117953, 0.282132]
x: [5.58132, 0.986653, 0.553845]   vel: [5.97583, 0.0718919, 0.277754]
x: [5.7449, 1.05463, 0.587155]   vel: [6.02638, 0.140223, 0.273616]
x: [5.909, 1.12503, 0.621372]   vel: [6.07701, 0.203499, 0.269692]
x: [6.07362, 1.19782, 0.656461]   vel: [6.12788, 0.259343, 0.265938]
x: [6.23878, 1.27296, 0.69238]   vel: [6.17922, 0.305763, 0.262298]
x: [6.40448, 1.35044, 0.729086]   vel: [6.23123, 0.34123, 0.258715]
x: [6.57075, 1.43022, 0.766537]   vel: [6.28407, 0.364734, 0.255139]
x: [6.73759, 1.51228, 0.80469]   vel: [6.33782, 0.375814, 0.251533]
x: [6.90501, 1.59661, 0.843506]   vel: [6.39248, 0.374566, 0.247879]
x: [7.07301, 1.68319, 0.882951]   vel: [6.44793, 0.361633, 0.244174]
x: [7.24158, 1.772, 0.922989]   vel: [6.50397, 0.33816, 0.240431]
x: [7.41072, 1.86305, 0.963593]   vel: [6.56035, 0.305735, 0.236674]
x: [7.58041, 1.95633, 1.00473]   vel: [6.61681, 0.266305, 0.232932]
x: [7.75065, 2.05186, 1.04638]   vel: [6.67309, 0.222074, 0.229231]
x: [7.92142, 2.14964, 1.08852]   vel: [6.72899, 0.175398, 0.225593]
x: [8.09267, 2.24969, 1.13111]   vel: [6.78436, 0.128656, 0.22203]
x: [8.2644, 2.35203, 1.17414]   vel: [6.83913, 0.084132, 0.218545]
x: [8.43657, 2.45667, 1.21757]   vel: [6.89329, 0.0439006, 0.215131]
x: [8.60914, 2.56363, 1.26137]   vel: [6.94687, 0.0097249, 0.211779]
x: [8.78208, 2.67293, 1.30553]   vel: [6.99993, -0.017027, 0.208476]
x: [8.95537, 2.78458, 1.35001]   vel: [7.05253, -0.0354421, 0.205214]
x: [9.12896, 2.89858, 1.39478]   vel: [7.1047, -0.0450958, 0.201987]
x: [9.30283, 3.01494, 1.43981]   vel: [7.15644, -0.0460584, 0.198801]
x: [9.47695, 3.13366, 1.48507]   vel: [7.20773, -0.0388723, 0.195664]
x: [9.65129, 3.25473, 1.53053]   vel: [7.2585, -0.0245028, 0.192592]
x: [9.82584, 3.37814, 1.57617]   vel: [7.30867, -0.00426778, 0.189601]
x: [10.0006, 3.50388, 1.62194]   vel: [7.35817, 0.0202524, 0.186707]
x: [10.1755, 3.63192, 1.66781]   vel: [7.40691, 0.0473174, 0.183921]
x: [10.3505, 3.76223, 1.71375]   vel: [7.45486, 0.0751388, 0.181248]
x: [10.5257, 3.8948, 1.75971]   vel: [7.50199, 0.101987, 0.178689]
x: [10.701, 4.02958, 1.80566]   vel: [7.5483, 0.126293, 0.176235]
x: [10.8763, 4.16656, 1.85156]   vel: [7.59379, 0.146741, 0.173876]
x: [11.0518, 4.30571, 1.89736]   vel: [7.63849, 0.162333, 0.171601]
x: [11.2274, 4.44698, 1.94303]   vel: [7.6824, 0.172434, 0.169397]
x: [11.403, 4.59037, 1.98852]   vel: [7.72552, 0.176798, 0.167254]
x: [11.5787, 4.73583, 2.03381]   vel: [7.76784, 0.175558, 0.165168]
x: [11.7543, 4.88334, 2.07884]   vel: [7.8093, 0.169198, 0.163135]
x: [11.93, 5.03289, 2.12358]   vel: [7.84986, 0.158501, 0.161156]
x: [12.1056, 5.18444, 2.16801]   vel: [7.88945, 0.14448, 0.159235]
x: [12.2812, 5.33798, 2.21208]   vel: [7.92803, 0.128294, 0.157373]
x: [12.4566, 5.49349, 2.25577]   vel: [7.96553, 0.111167, 0.155574]
x: [12.6319, 5.65095, 2.29904]   vel: [8.00193, 0.0942964, 0.153839]
x: [12.807, 5.81033, 2.34186]   vel: [8.03719, 0.0787738, 0.152169]
x: [12.982, 5.97163, 2.38421]   vel: [8.0713, 0.0655172, 0.150562]
x: [13.1567, 6.13481, 2.42605]   vel: [8.10425, 0.0552195, 0.149018]
x: [13.3311, 6.29986, 2.46735]   vel: [8.13604, 0.048315, 0.147537]
x: [13.5052, 6.46675, 2.50809]   vel: [8.16666, 0.0449663, 0.146118]
x: [13.6789, 6.63545, 2.54824]   vel: [8.19611, 0.0450738, 0.144762]
x: [13.8523, 6.80594, 2.58776]   vel: [8.22438, 0.0483027, 0.14347]
x: [14.0253, 6.97818, 2.62665]   vel: [8.25146, 0.0541229, 0.142244]
x: [14.1978, 7.15213, 2.66486]   vel: [8.27734, 0.0618636, 0.141086]
x: [14.3699, 7.32777, 2.70237]   vel: [8.30201, 0.0707729, 0.139997]
x: [14.5415, 7.50505, 2.73916]   vel: [8.32547, 0.0800786, 0.138976]
x: [14.7126, 7.68395, 2.7752]   vel: [8.34772, 0.0890477, 0.138023]
x: [14.8832, 7.86441, 2.81047]   vel: [8.36875, 0.097037, 0.137136]
x: [15.0532, 8.04639, 2.84494]   vel: [8.38858, 0.103534, 0.136312]
x: [15.2226, 8.22987, 2.8786]   vel: [8.4072, 0.108182, 0.135548]
x: [15.3914, 8.4148, 2.91141]   vel: [8.42462, 0.110796, 0.134842]
x: [15.5596, 8.60114, 2.94337]   vel: [8.44083, 0.111362, 0.134191]
x: [15.7271, 8.78885, 2.97445]   vel: [8.45584, 0.110019, 0.133595]
x: [15.894, 8.97789, 3.00463]   vel: [8.46965, 0.10704, 0.133052]
x: [16.0601, 9.16823, 3.03391]   vel: [8.48224, 0.102792, 0.132562]
x: [16.2255, 9.35983, 3.06225]   vel: [8.49361, 0.0977069, 0.132124]
x: [16.3901, 9.55265, 3.08966]   vel: [8.50376, 0.0922392, 0.131739]
x: [16.5539, 9.74666, 3.11612]   vel: [8.51269, 0.0868268, 0.131406]
x: [16.7169, 9.94181, 3.14162]   vel: [8.52039, 0.0818624, 0.131126]
x: [16.879, 10.1381, 3.16615]   vel: [8.52689, 0.077665, 0.130897]
x: [17.0403, 10.3354, 3.1897]   vel: [8.53217, 0.0744634, 0.130721]
x: [17.2006, 10.5338, 3.21226]   vel: [8.53625, 0.0723878, 0.130596]
x: [17.3601, 10.7331, 3.23383]   vel: [8.53913, 0.0714689, 0.130523]
x: [17.5185, 10.9335, 3.2544]   vel: [8.54083, 0.0716454, 0.130501]
x: [17.676, 11.1347, 3.27396]   vel: [8.54136, 0.072779, 0.130531]
x: [17.8325, 11.3368, 3.29253]   vel: [8.54072, 0.0746728, 0.130612]
x: [17.9879, 11.5397, 3.31008]   vel: [8.53893, 0.0770916, 0.130744]
x: [18.1423, 11.7435, 3.32662]   vel: [8.536, 0.0797852, 0.130926]
x: [18.2956, 11.948, 3.34216]   vel: [8.53195, 0.0825096, 0.131158]
x: [18.4478, 12.1532, 3.35669]   vel: [8.52679, 0.085044, 0.13144]
x: [18.599, 12.3591, 3.3702]   vel: [8.52054, 0.0872073, 0.131769]
x: [18.749, 12.5656, 3.38272]   vel: [8.5132, 0.0888664, 0.132146]
x: [18.8978, 12.7727, 3.39423]   vel: [8.5048, 0.0899419, 0.132569]
x: [19.0455, 12.9804, 3.40475]   vel: [8.49536, 0.0904083, 0.133039]
x: [19.192, 13.1886, 3.41428]   vel: [8.48488, 0.0902899, 0.133553]
x: [19.3373, 13.3973, 3.42282]   vel: [8.47338, 0.0896529, 0.134111]
x: [19.4814, 13.6064, 3.43039]   vel: [8.46087, 0.0885968, 0.134713]
x: [19.6243, 13.8159, 3.437]   vel: [8.44738, 0.0872421, 0.135358]
x: [19.7659, 14.0258, 3.44265]   vel: [8.43292, 0.0857187, 0.136046]
x: [19.9062, 14.236, 3.44735]   vel: [8.41751, 0.0841557, 0.136776]
x: [20.0453, 14.4465, 3.45112]   vel: [8.40115, 0.0826709, 0.137548]
x: [20.1831, 14.6572, 3.45397]   vel: [8.38388, 0.0813635, 0.138362]
x: [20.3196, 14.8682, 3.45591]   vel: [8.36571, 0.0803083, 0.139218]
x: [20.4547, 15.0794, 3.45696]   vel: [8.34666, 0.0795535, 0.140114]
x: [20.5886, 15.2908, 3.45714]   vel: [8.32675, 0.0791199, 0.141051]
x: [20.7211, 15.5022, 3.45644]   vel: [8.306, 0.0790024, 0.142028]
x: [20.8522, 15.7138, 3.45491]   vel: [8.28443, 0.0791743, 0.143046]
x: [20.9819, 15.9254, 3.45254]   vel: [8.26206, 0.0795906, 0.144102]
x: [21.1103, 16.137, 3.44936]   vel: [8.23891, 0.0801942, 0.145198]
x: [21.2373, 16.3487, 3.44539]   vel: [8.21501, 0.0809217, 0.146332]
x: [21.3629, 16.5603, 3.44064]   vel: [8.19038, 0.0817085, 0.147505]
x: [21.4872, 16.7719, 3.43514]   vel: [8.16505, 0.0824934, 0.148715]
x: [21.61, 16.9833, 3.4289]   vel: [8.13903, 0.083223, 0.149962]
x: [21.7313, 17.1947, 3.42194]   vel: [8.11235, 0.0838545, 0.151245]
x: [21.8513, 17.4059, 3.41429]   vel: [8.08503, 0.0843578, 0.152564]
x: [21.9699, 17.6169, 3.40597]   vel: [8.05709, 0.0847157, 0.153919]
x: [22.087, 17.8277, 3.39699]   vel: [8.02857, 0.0849235, 0.155308]
x: [22.2027, 18.0383, 3.38738]   vel: [7.99948, 0.084988, 0.15673]
x: [22.3169, 18.2487, 3.37716]   vel: [7.96984, 0.0849257, 0.158186]
x: [22.4297, 18.4588, 3.36635]   vel: [7.93969, 0.0847602, 0.159675]
x: [22.5411, 18.6686, 3.35497]   vel: [7.90904, 0.0845197, 0.161196]
x: [22.651, 18.878, 3.34306]   vel: [7.87792, 0.0842349, 0.162749]
x: [22.7595, 19.0872, 3.33062]   vel: [7.84635, 0.0839365, 0.164333]
x: [22.8665, 19.296, 3.31769]   vel: [7.81436, 0.0836526, 0.165946]
x: [22.9721, 19.5044, 3.30429]   vel: [7.78198, 0.0834077, 0.16759]
x: [23.0762, 19.7124, 3.29044]   vel: [7.74922, 0.0832211, 0.169263]
x: [23.1789, 19.92, 3.27616]   vel: [7.71612, 0.0831067, 0.170964]
x: [23.2802, 20.1271, 3.26149]   vel: [7.6827, 0.0830725, 0.172692]
x: [23.3799, 20.3339, 3.24643]   vel: [7.64898, 0.0831207, 0.174448]
x: [23.4783, 20.5401, 3.23102]   vel: [7.61499, 0.0832487, 0.17623]
x: [23.5752, 20.7459, 3.21528]   vel: [7.58075, 0.0834492, 0.178038]
x: [23.6706, 20.9512, 3.19924]   vel: [7.54629, 0.0837121, 0.179871]
x: [23.7646, 21.1561, 3.18291]   vel: [7.51164, 0.0840246, 0.181727]
x: [23.8572, 21.3603, 3.16631]   vel: [7.47682, 0.0843729, 0.183607]
x: [23.9484, 21.5641, 3.14949]   vel: [7.44186, 0.084743, 0.185509]
x: [24.0381, 21.7674, 3.13244]   vel: [7.40678, 0.0851216, 0.187433]
x: [24.1264, 21.9701, 3.11521]   vel: [7.37161, 0.0854968, 0.189377]
x: [24.2132, 22.1722, 3.09781]   vel: [7.33638, 0.0858586, 0.19134]
x: [24.2987, 22.3738, 3.08026]   vel: [7.3011, 0.0861994, 0.193321]
x: [24.3827, 22.5748, 3.06259]   vel: [7.26581, 0.0865138, 0.19532]
x: [24.4653, 22.7752, 3.04481]   vel: [7.23053, 0.0867993, 0.197336]
x: [24.5466, 22.9751, 3.02696]   vel: [7.19529, 0.0870553, 0.199366]
x: [24.6264, 23.1744, 3.00905]   vel: [7.16011, 0.0872833, 0.201411]
x: [24.7049, 23.3731, 2.9911]   vel: [7.12502, 0.0874865, 0.203468]
x: [24.7819, 23.5712, 2.97313]   vel: [7.09003, 0.0876695, 0.205537]
x: [24.8576, 23.7687, 2.95517]   vel: [7.05519, 0.0878376, 0.207616]
x: [24.932, 23.9656, 2.93723]   vel: [7.0205, 0.0879964, 0.209704]
x: [25.0049, 24.1619, 2.91933]   vel: [6.986, 0.0881519, 0.2118]
x: [25.0765, 24.3576, 2.9015]   vel: [6.95171, 0.0883094, 0.213902]
x: [25.1468, 24.5528, 2.88375]   vel: [6.91765, 0.0884738, 0.216009]
x: [25.2157, 24.7473, 2.8661]   vel: [6.88385, 0.0886493, 0.218119]
x: [25.2833, 24.9413, 2.84857]   vel: [6.85033, 0.088839, 0.220232]
x: [25.3495, 25.1346, 2.83118]   vel: [6.81712, 0.0890449, 0.222344]
x: [25.4145, 25.3274, 2.81394]   vel: [6.78423, 0.0892681, 0.224456]
x: [25.4781, 25.5196, 2.79687]   vel: [6.75169, 0.0895088, 0.226565]
x: [25.5404, 25.7112, 2.77999]   vel: [6.71953, 0.089766, 0.22867]
x: [25.6015, 25.9022, 2.76331]   vel: [6.68776, 0.0900381, 0.230768]
x: [25.6612, 26.0927, 2.74685]   vel: [6.65641, 0.090323, 0.232859]
x: [25.7197, 26.2826, 2.73063]   vel: [6.6255, 0.0906177, 0.23494]
x: [25.7768, 26.472, 2.71465]   vel: [6.59505, 0.0909193, 0.23701]
x: [25.8328, 26.6608, 2.69894]   vel: [6.56508, 0.0912245, 0.239067]
x: [25.8874, 26.849, 2.6835]   vel: [6.53561, 0.09153, 0.241108]
x: [25.9408, 27.0368, 2.66836]   vel: [6.50667, 0.0918327, 0.243133]
x: [25.993, 27.224, 2.65352]   vel: [6.47826, 0.0921297, 0.245139]
x: [26.0439, 27.4107, 2.63899]   vel: [6.45042, 0.0924183, 0.247125]
x: [26.0937, 27.597, 2.62479]   vel: [6.42315, 0.0926962, 0.249088]
x: [26.1421, 27.7827, 2.61093]   vel: [6.39648, 0.0929617, 0.251026]
x: [26.1894, 27.9679, 2.59741]   vel: [6.37043, 0.093213, 0.252938]
x: [26.2355, 28.1527, 2.58426]   vel: [6.345, 0.0934493, 0.254821]
x: [26.2804, 28.3371, 2.57148]   vel: [6.32023, 0.0936698, 0.256673]

In [35]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...
init useless...
init useless...
init useless...

In [36]: from quatlib import *
    ...: 
    ...: from math import sin, cos, tan, atan2, pi 
    ...: import matplotlib.pyplot as plt
    ...: import numpy as np
    ...: 
    ...: import cmath
    ...: 
    ...: # import casadi library
    ...: #from casadi import *
    ...: ...
    ...: print(initValues_circ['vel'])
    ...: 
    ...: with open('steadyCircle3' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ, outfile, default_flow_style=False)
    ...: 
    ...: with open('steadyCircle2' + '.yaml', 'w') as outfile:
    ...:     yaml.dump(initValues_circ2, outfile, default_flow_style=False)
    ...: 
    ...: plt.show()
    ...: print('End script')
Start script
/usr/local/bin/ipython:154: RuntimeWarning: invalid value encountered in sqrt
Stable Longitudinal flight with:
Elevator: 0
Angle of attack: 0.0121418164157
Velocities:
[[ 8.41628075]
 [ 0.        ]
 [ 0.10219396]]
Thrust: 0.0600570589066
Thrust307 0.030207251848453034
Thrust2 0.029581321915403788

Stable Circle flight with:
Thrust: 0.030207251848453034
Elevator: -0.007567845629303927
Rudder: 0.0034467704795790566
Circle Radius: 7.004118173521596
Angle of attack: 0.09334417442460441
Sideslip: -0.03981817800661716
Velocities:
[4.974287033375871, -0.19903828485722644, 0.46567399621383687]
End script

In [37]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [38]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
  File "/home/lukas/Code/AirborneWindEnergy/python/motionSimulation_3D.py", line 36
    visual =
            ^
SyntaxError: invalid syntax


In [39]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.060057058906572515, 0.0, 0]
x: [-15, 0, 0]   vel: [8.416280751074433, 0.0, 0.10219395776951837]
x: [-14.7475, 0, 7.42633e-19]   vel: [8.41628, 0, 0.102194]
x: [-14.495, 0, 1.90173e-18]   vel: [8.41628, 0, 0.102194]
x: [-14.2425, 0, 3.28892e-18]   vel: [8.41628, 0, 0.102194]
x: [-13.99, 0, 4.91695e-18]   vel: [8.41628, 0, 0.102194]

In [40]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.060057058906572515, 0.0, 0]
init useless...

In [41]: 5/180*pi

Out[41]: 0.08726646259971647

In [42]: 
In [42]: sin(5/180*pi)

Out[42]: 0.08715574274765817

In [43]: 
In [43]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [44]: invalid command name "140405162203592idle_draw"
    while executing
"140405162203592idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...
init useless...

In [45]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...

In [46]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init useless...
init useless...
init useless...
init useless...
init useless...
init useless...
init useless...
init useless...

In [47]: invalid command name "140405111155464idle_draw"
    while executing
"140405111155464idle_draw"
    ("after" script)
"""
...: First Aircraft simulation
...: """
...: import numpy as np
...: import matplotlib.pyplot as plt
...: from matplotlib.animation import FuncAnimation
...: 
...: # 3D Animation utils
...: from mpl_toolkits.mplot3d import Axes3D
...: import mpl_toolkits.mplot3d.art3d as art3d
...: ...
...: if visual == 2:
...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                         init_func=init, blit=True)
...: elif visual == 3:
...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     init_func=init3d, blit=False)
...: 
...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
...:                     #init_func=init, blit=True)
...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
x: [0, 0, 0]   vel: [4.974287033375871, -0.19903828485722644, 0.46567399621383687]
x: [0.499004, -0.0189428, -0.00530953]   vel: [4.96278, 0.424589, 0.363345]
x: [0.999052, -0.0111606, 0.00358468]   vel: [4.92858, 0.852692, 0.363311]
x: [1.50104, 0.0195632, 0.0255028]   vel: [4.94376, 1.00009, 0.368112]
x: [2.00606, 0.0705952, 0.0578523]   vel: [5.03066, 0.875082, 0.363614]
x: [2.51538, 0.140346, 0.100064]   vel: [5.15898, 0.557212, 0.353659]
x: [3.03013, 0.229, 0.152662]   vel: [5.28814, 0.171417, 0.343452]
x: [3.5509, 0.338475, 0.215961]   vel: [5.40677, -0.150271, 0.333766]
x: [4.07764, 0.471547, 0.289847]   vel: [5.5315, -0.313007, 0.321925]
x: [4.60995, 0.630714, 0.374323]   vel: [5.67757, -0.287679, 0.306603]
x: [5.1475, 0.817381, 0.469678]   vel: [5.84112, -0.114137, 0.289943]
x: [5.69032, 1.0317, 0.575949]   vel: [6.00953, 0.117908, 0.27497]
x: [6.23878, 1.27296, 0.692381]   vel: [6.17922, 0.305791, 0.262298]
x: [6.79334, 1.54014, 0.817558]   vel: [6.35595, 0.376764, 0.250321]
x: [7.35428, 1.83245, 0.949999]   vel: [6.54154, 0.317419, 0.237926]
x: [7.92142, 2.14964, 1.08852]   vel: [6.72899, 0.175373, 0.225593]
x: [8.49405, 2.49207, 1.23213]   vel: [6.91121, 0.0317263, 0.214008]
x: [9.07106, 2.86032, 1.37982]   vel: [7.08736, -0.042879, 0.203059]
x: [9.65129, 3.25473, 1.53054]   vel: [7.2585, -0.0245023, 0.192592]
x: [10.2338, 3.6751, 1.68312]   vel: [7.42299, 0.0566136, 0.183017]
x: [10.8179, 4.12066, 1.83627]   vel: [7.57872, 0.140446, 0.174653]
x: [11.403, 4.59037, 1.98853]   vel: [7.72553, 0.176811, 0.167254]
x: [11.9885, 5.08319, 2.13843]   vel: [7.86317, 0.154136, 0.160509]
x: [12.5735, 5.59825, 2.28467]   vel: [7.98993, 0.0998013, 0.15441]
x: [13.1567, 6.13482, 2.42605]   vel: [8.10426, 0.0552015, 0.149018]
x: [13.7368, 6.69209, 2.56149]   vel: [8.20567, 0.0458221, 0.144323]
x: [14.3126, 7.26905, 2.68995]   vel: [8.29393, 0.067732, 0.140352]
x: [14.8832, 7.86441, 2.81048]   vel: [8.36876, 0.0970528, 0.137136]
x: [15.4476, 8.47677, 2.92217]   vel: [8.43017, 0.111218, 0.134618]
x: [16.0048, 9.10466, 3.02426]   vel: [8.47818, 0.104318, 0.132719]
x: [16.5539, 9.74667, 3.11613]   vel: [8.5127, 0.0868132, 0.131406]
x: [17.0939, 10.4014, 3.19734]   vel: [8.53367, 0.0736304, 0.130673]
x: [17.6236, 11.0675, 3.26757]   vel: [8.54132, 0.0723038, 0.130515]
x: [18.1423, 11.7435, 3.32664]   vel: [8.53601, 0.0797933, 0.130926]
x: [18.6491, 12.4279, 3.3745]   vel: [8.51822, 0.087834, 0.131889]
x: [19.1433, 13.1192, 3.41123]   vel: [8.4885, 0.0903975, 0.133376]
x: [19.6243, 13.8159, 3.43702]   vel: [8.4474, 0.0872384, 0.135357]
x: [20.0914, 14.5167, 3.45219]   vel: [8.39551, 0.0822007, 0.137815]
x: [20.5441, 15.2203, 3.45719]   vel: [8.3335, 0.0792195, 0.140734]
x: [20.982, 15.9254, 3.45256]   vel: [8.26207, 0.0795894, 0.144102]
x: [21.4045, 16.6309, 3.43891]   vel: [8.18203, 0.0819794, 0.147904]
x: [21.8115, 17.3355, 3.41694]   vel: [8.09422, 0.0842146, 0.15212]
x: [22.2027, 18.0384, 3.3874]   vel: [7.99949, 0.0849929, 0.15673]
x: [22.578, 18.7385, 3.35109]   vel: [7.89873, 0.0844268, 0.16171]
x: [22.9371, 19.435, 3.30883]   vel: [7.79283, 0.0834774, 0.167038]
x: [23.2802, 20.1272, 3.26151]   vel: [7.68271, 0.0830659, 0.172692]
x: [23.6072, 20.8145, 3.20999]   vel: [7.5693, 0.0835277, 0.178646]
x: [23.9182, 21.4963, 3.15514]   vel: [7.45354, 0.0846202, 0.184873]
x: [24.2133, 22.1723, 3.09783]   vel: [7.33638, 0.0858638, 0.19134]
x: [24.4927, 22.842, 3.03889]   vel: [7.21878, 0.0868933, 0.198011]
x: [24.7566, 23.5053, 2.97913]   vel: [7.10167, 0.0876136, 0.204847]
x: [25.0051, 24.162, 2.91934]   vel: [6.98598, 0.0881519, 0.211801]
x: [25.2386, 24.8121, 2.86025]   vel: [6.87261, 0.0887089, 0.218825]
x: [25.4572, 25.4557, 2.80253]   vel: [6.76246, 0.0894245, 0.225865]
x: [25.6614, 26.0928, 2.74684]   vel: [6.65636, 0.0903223, 0.232863]
x: [25.8513, 26.7237, 2.69374]   vel: [6.55514, 0.0913279, 0.239754]
x: [26.0273, 27.3486, 2.64377]   vel: [6.45956, 0.0923265, 0.246471]
x: [26.1896, 27.968, 2.59738]   vel: [6.37035, 0.0932171, 0.252944]
x: [26.3386, 28.5822, 2.55499]   vel: [6.28814, 0.0939425, 0.2591]
x: [26.4745, 29.1918, 2.51694]   vel: [6.21353, 0.0944889, 0.264866]
x: [26.5975, 29.7971, 2.48353]   vel: [6.14701, 0.0948685, 0.270172]
x: [26.7079, 30.3988, 2.455]   vel: [6.08901, 0.095098, 0.274949]
x: [26.8059, 30.9974, 2.43154]   vel: [6.03984, 0.0951827, 0.279137]
x: [26.8917, 31.5936, 2.41328]   vel: [5.99974, 0.0951131, 0.282683]
x: [26.9654, 32.188, 2.40033]   vel: [5.96883, 0.0948695, 0.285543]
x: [27.0273, 32.7812, 2.39273]   vel: [5.94714, 0.0944319, 0.287686]
x: [27.0775, 33.3739, 2.3905]   vel: [5.93461, 0.0937897, 0.289096]
x: [27.1159, 33.9666, 2.3936]   vel: [5.93106, 0.0929472, 0.289767]
x: [27.1428, 34.56, 2.40198]   vel: [5.93622, 0.091925, 0.28971]
x: [27.1582, 35.1546, 2.41553]   vel: [5.94976, 0.0907558, 0.28895]
x: [27.1621, 35.7511, 2.43413]   vel: [5.97122, 0.089478, 0.287523]
x: [27.1545, 36.3498, 2.45764]   vel: [6.00012, 0.0881298, 0.285477]
x: [27.1354, 36.9513, 2.48585]   vel: [6.03589, 0.0867436, 0.282867]
x: [27.1048, 37.556, 2.51856]   vel: [6.07792, 0.0853445, 0.279759]
x: [27.0628, 38.1642, 2.55553]   vel: [6.12554, 0.0839499, 0.276219]
x: [27.0093, 38.7763, 2.59649]   vel: [6.17807, 0.0825722, 0.272319]
x: [26.9442, 39.3926, 2.64115]   vel: [6.2348, 0.0812207, 0.26813]
x: [26.8677, 40.0131, 2.68921]   vel: [6.29501, 0.079904, 0.263722]
x: [26.7796, 40.6381, 2.74033]   vel: [6.35796, 0.0786307, 0.259162]
x: [26.68, 41.2675, 2.79415]   vel: [6.42294, 0.0774084, 0.254514]
x: [26.5689, 41.9016, 2.85031]   vel: [6.48924, 0.0762431, 0.249836]
x: [26.4463, 42.5401, 2.90841]   vel: [6.55616, 0.0751378, 0.245183]
x: [26.3123, 43.183, 2.96806]   vel: [6.62304, 0.0740922, 0.240603]
x: [26.167, 43.8302, 3.02885]   vel: [6.68924, 0.0731035, 0.236138]
x: [26.0104, 44.4815, 3.09037]   vel: [6.75416, 0.0721678, 0.231827]
x: [25.8427, 45.1365, 3.15221]   vel: [6.81722, 0.0712811, 0.227702]
x: [25.664, 45.7951, 3.21395]   vel: [6.87791, 0.0704401, 0.22379]
x: [25.4744, 46.4569, 3.27519]   vel: [6.93574, 0.0696427, 0.220115]
x: [25.2742, 47.1214, 3.33554]   vel: [6.99029, 0.068887, 0.216695]
x: [25.0635, 47.7884, 3.39461]   vel: [7.04115, 0.0681711, 0.213546]
x: [24.8425, 48.4574, 3.45206]   vel: [7.088, 0.0674922, 0.210679]
x: [24.6116, 49.1278, 3.50753]   vel: [7.13053, 0.0668471, 0.208103]
x: [24.3709, 49.7993, 3.56072]   vel: [7.16852, 0.0662325, 0.205825]
x: [24.1207, 50.4714, 3.61135]   vel: [7.20176, 0.0656451, 0.203847]
x: [23.8615, 51.1435, 3.65916]   vel: [7.2301, 0.0650824, 0.202172]
x: [23.5934, 51.8151, 3.70393]   vel: [7.25345, 0.0645424, 0.200798]
x: [23.3168, 52.4857, 3.74549]   vel: [7.27176, 0.0640234, 0.199725]
x: [23.032, 53.1548, 3.78368]   vel: [7.285, 0.0635238, 0.198949]
x: [22.7395, 53.8219, 3.8184]   vel: [7.29322, 0.0630421, 0.198463]
x: [22.4395, 54.4864, 3.84957]   vel: [7.29649, 0.0625766, 0.198264]
x: [22.1325, 55.148, 3.87716]   vel: [7.2949, 0.0621255, 0.198342]
x: [21.8187, 55.8062, 3.90117]   vel: [7.28862, 0.0616874, 0.198691]
x: [21.4986, 56.4604, 3.92164]   vel: [7.27782, 0.0612611, 0.1993]
x: [21.1726, 57.1104, 3.93864]   vel: [7.2627, 0.0608455, 0.200159]
x: [20.8408, 57.7556, 3.95226]   vel: [7.2435, 0.0604398, 0.201258]
x: [20.5039, 58.3958, 3.96266]   vel: [7.22049, 0.0600431, 0.202584]
x: [20.1619, 59.0306, 3.96997]   vel: [7.19395, 0.0596544, 0.204124]
x: [19.8154, 59.6596, 3.97439]   vel: [7.16419, 0.0592729, 0.205864]
x: [19.4645, 60.2828, 3.97613]   vel: [7.13153, 0.0588975, 0.20779]
x: [19.1096, 60.8997, 3.9754]   vel: [7.0963, 0.0585273, 0.209886]
x: [18.751, 61.5103, 3.97244]   vel: [7.05886, 0.0581613, 0.212135]
x: [18.3889, 62.1143, 3.9675]   vel: [7.01956, 0.0577985, 0.214521]
x: [18.0235, 62.7117, 3.96084]   vel: [6.97877, 0.057438, 0.217025]
x: [17.6551, 63.3023, 3.95273]   vel: [6.93685, 0.0570786, 0.219628]
x: [17.2839, 63.8861, 3.94343]   vel: [6.89417, 0.0567193, 0.22231]
x: [16.91, 64.4632, 3.93321]   vel: [6.85109, 0.0563587, 0.225051]
x: [16.5335, 65.0334, 3.92234]   vel: [6.80797, 0.0559957, 0.22783]
x: [16.1547, 65.5968, 3.91107]   vel: [6.76517, 0.0556289, 0.230626]
x: [15.7736, 66.1536, 3.89966]   vel: [6.72302, 0.055257, 0.233416]
x: [15.3902, 66.7038, 3.88835]   vel: [6.68184, 0.0548787, 0.236179]
x: [15.0047, 67.2475, 3.87738]   vel: [6.64196, 0.0544929, 0.238892]
x: [14.6171, 67.785, 3.86695]   vel: [6.60366, 0.0540983, 0.241534]
x: [14.2274, 68.3163, 3.85727]   vel: [6.56722, 0.0536939, 0.244082]
x: [13.8356, 68.8417, 3.84855]   vel: [6.53289, 0.0532788, 0.246517]
x: [13.4416, 69.3613, 3.84094]   vel: [6.50088, 0.0528522, 0.248819]
x: [13.0455, 69.8755, 3.8346]   vel: [6.47141, 0.0524136, 0.250969]
x: [12.6472, 70.3844, 3.82968]   vel: [6.44465, 0.0519627, 0.25295]
x: [12.2465, 70.8883, 3.8263]   vel: [6.42074, 0.0514996, 0.254748]
x: [11.8436, 71.3875, 3.82456]   vel: [6.39979, 0.0510243, 0.256348]
x: [11.4381, 71.8821, 3.82454]   vel: [6.3819, 0.0505376, 0.25774]
x: [11.0301, 72.3726, 3.82632]   vel: [6.36711, 0.05004, 0.258916]
x: [10.6195, 72.8591, 3.82995]   vel: [6.35545, 0.0495327, 0.259869]
x: [10.2061, 73.3419, 3.83547]   vel: [6.34693, 0.049017, 0.260597]
x: [9.78988, 73.8213, 3.84288]   vel: [6.3415, 0.048494, 0.261099]
x: [9.37065, 74.2976, 3.85221]   vel: [6.33912, 0.0479656, 0.261376]
x: [8.94834, 74.771, 3.86343]   vel: [6.33968, 0.0474331, 0.261433]
x: [8.52283, 75.2417, 3.87651]   vel: [6.3431, 0.0468984, 0.261278]
x: [8.09403, 75.71, 3.89143]   vel: [6.34922, 0.0463629, 0.260919]
x: [7.66184, 76.1761, 3.90811]   vel: [6.35791, 0.0458283, 0.260368]
x: [7.22617, 76.6403, 3.92651]   vel: [6.36899, 0.045296, 0.259638]
x: [6.78695, 77.1027, 3.94653]   vel: [6.38227, 0.0447672, 0.258744]
x: [6.34411, 77.5636, 3.9681]   vel: [6.39755, 0.044243, 0.257701]
x: [5.89759, 78.0231, 3.99111]   vel: [6.41462, 0.0437244, 0.256526]
x: [5.44735, 78.4814, 4.01546]   vel: [6.43327, 0.043212, 0.255237]
x: [4.99337, 78.9386, 4.04103]   vel: [6.45326, 0.0427064, 0.253851]
x: [4.53562, 79.3949, 4.06771]   vel: [6.47436, 0.0422078, 0.252387]
x: [4.0741, 79.8504, 4.09536]   vel: [6.49635, 0.0417164, 0.250862]
x: [3.60884, 80.3052, 4.12386]   vel: [6.51899, 0.041232, 0.249294]
x: [3.13987, 80.7594, 4.15306]   vel: [6.54204, 0.0407544, 0.2477]
x: [2.66722, 81.2131, 4.18283]   vel: [6.5653, 0.0402833, 0.246097]
x: [2.19096, 81.6664, 4.21304]   vel: [6.58853, 0.0398181, 0.2445]
x: [1.71116, 82.1192, 4.24353]   vel: [6.61154, 0.0393581, 0.242923]
x: [1.22793, 82.5718, 4.27419]   vel: [6.63412, 0.0389028, 0.241381]
x: [0.741359, 83.024, 4.30486]   vel: [6.65608, 0.0384513, 0.239886]
x: [0.25157, 83.4759, 4.33542]   vel: [6.67725, 0.0380028, 0.238449]
x: [-0.241306, 83.9275, 4.36574]   vel: [6.69747, 0.0375564, 0.237081]
x: [-0.737125, 84.3788, 4.3957]   vel: [6.71658, 0.0371114, 0.235791]
x: [-1.23573, 84.8298, 4.42517]   vel: [6.73445, 0.0366667, 0.234586]
x: [-1.73697, 85.2805, 4.45406]   vel: [6.75098, 0.0362217, 0.233475]
x: [-2.24066, 85.7309, 4.48226]   vel: [6.76604, 0.0357754, 0.232462]
x: [-2.74662, 86.1809, 4.50969]   vel: [6.77957, 0.035327, 0.231553]
x: [-3.25466, 86.6306, 4.53625]   vel: [6.79148, 0.0348758, 0.230751]
x: [-3.7646, 87.0798, 4.56188]   vel: [6.80173, 0.034421, 0.230058]
x: [-4.27624, 87.5286, 4.58651]   vel: [6.81028, 0.033962, 0.229477]
x: [-4.78938, 87.9768, 4.6101]   vel: [6.81711, 0.0334983, 0.229009]
x: [-5.30381, 88.4246, 4.63261]   vel: [6.82221, 0.0330292, 0.228652]
x: [-5.81934, 88.8718, 4.65401]   vel: [6.82559, 0.0325543, 0.228407]
x: [-6.33577, 89.3184, 4.67427]   vel: [6.82728, 0.0320731, 0.228272]
x: [-6.85291, 89.7643, 4.6934]   vel: [6.82731, 0.0315854, 0.228244]
x: [-7.37055, 90.2096, 4.7114]   vel: [6.82573, 0.0310909, 0.22832]
x: [-7.88851, 90.6542, 4.72827]   vel: [6.82261, 0.0305893, 0.228497]
x: [-8.40661, 91.0981, 4.74406]   vel: [6.81801, 0.0300807, 0.22877]
x: [-8.92466, 91.5412, 4.75878]   vel: [6.81203, 0.0295649, 0.229134]
x: [-9.44249, 91.9837, 4.77249]   vel: [6.80475, 0.029042, 0.229583]
x: [-9.95994, 92.4254, 4.78523]   vel: [6.79628, 0.0285121, 0.230113]
x: [-10.4769, 92.8663, 4.79706]   vel: [6.78672, 0.0279753, 0.230715]
x: [-10.9931, 93.3066, 4.80804]   vel: [6.77619, 0.0274321, 0.231384]
x: [-11.5085, 93.7461, 4.81824]   vel: [6.76481, 0.0268826, 0.232112]

In [48]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
x: [0, 0, 0]   vel: [4.974287033375871, -0.19903828485722644, 0.46567399621383687]
x: [0.499004, -0.0189428, -0.00530953]   vel: [4.96278, 0.424589, 0.363345]
x: [0.999052, -0.0111606, 0.00358468]   vel: [4.92858, 0.852692, 0.363311]
x: [1.50104, 0.0195632, 0.0255028]   vel: [4.94376, 1.00009, 0.368112]
x: [2.00606, 0.0705952, 0.0578523]   vel: [5.03066, 0.875082, 0.363614]

In [49]: """
    ...: First Aircraft simulation
    ...: """
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from matplotlib.animation import FuncAnimation
    ...: 
    ...: # 3D Animation utils
    ...: from mpl_toolkits.mplot3d import Axes3D
    ...: import mpl_toolkits.mplot3d.art3d as art3d
    ...: ...
    ...: if visual == 2:
    ...:     ani = FuncAnimation(fig, update_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                         init_func=init, blit=True)
    ...: elif visual == 3:
    ...:     ani = FuncAnimation(fig, update3d_aircraft, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     init_func=init3d, blit=False)
    ...: 
    ...: #ani = FuncAnimation(fig, update_limitCycle, frames=np.ones(int((t_final-t_start)/dt))*dt,
    ...:                     #init_func=init, blit=True)
    ...: plt.show()
Control with [T, dE, dR] [0.030207251848453034, -0.007567845629303927, 0.0034467704795790566]
init call is  useless...

In [50]: exit()


Process Python finished
